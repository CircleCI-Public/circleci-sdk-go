openapi: 3.0.3
info:
  title: CircleCI API
  description: This describes the resources that make up the CircleCI API v2.
  license:
    name: MIT
    url: https://opensource.org/license/MIT
  version: v2
servers:
- url: https://circleci.com/api/v2
security:
- api_key_header: []
- basic_auth: []
- api_key_query: []
tags:
- name: Context
  description: "Endpoints relating to [contexts](https://circleci.com/docs/contexts/).\
    \ Use contexts to secure and share environment variables."
- name: Insights
  description: "Endpoints relating to [Insights](https://circleci.com/docs/insights/).\
    \ Use Insights to monitor credit and compute usage for your projects."
- name: User
  description: A set of endpoints you can use to get information about a specific
    user.
- name: Pipeline
  description: "Endpoints relating to [pipelines](https://circleci.com/docs/pipelines/).\
    \ Get information about your pipelines. Trigger or continue a pipeline."
- name: Job
  description: "Endpoints relating to [jobs](https://circleci.com/docs/jobs-steps/).\
    \ Get information about your jobs, retrieve job assets, cancel a job."
- name: Workflow
  description: "Endpoints relating to [workflows](https://circleci.com/docs/workflows/).\
    \ Get information about your workflows, or interact with them to rerun, cancel\
    \ or approve a job."
- name: Webhook
  description: "Endpoints relating to [outbound webhooks](https://circleci.com/docs/webhooks/#outbound-webhooks).\
    \ Use outbound webhooks to integrate your CircleCI builds with external services."
- name: OIDC Token Management
  description: Endpoints related to manage oidc identity tokens
- name: Policy Management
  description: Endpoints related to managing policies and making policy decisions
- name: Project
  description: "[__EXPERIMENTAL__] Endpoints related to creating and managing a project."
- name: Usage
  description: |
    Endpoints related to organization usage exports.

    The Usage API is an API provided by CircleCI to customers to access all of their usage data on CircleCI. It contains all the metadata (org, project, pipeline, workflow, and job dimensions) as well as credit consumption data. It is provided at the near lowest level of granularity (at the job run level).

    __Restrictions__

    * Max result set size of 100MB
    * Query timeout of 4 hours.
    * Max date window of 32 days
    * 13 months of historical data is available
    * No PII is surfaced in the Usage API (e.g. email address, Github login name)
    * The POST endpoint can only be queried up to (i.e. is rate limited to) 10 times per hour per org
    * The GET endpoint can only be queried up to (i.e. is rate limited to) 10 times per minute per org
    * To increase performance the API can generate multiple CSV files that need to be merged after download

    __Requirements__

    * organization ID - To get your organization ID go to to Organization Settings tab in the CircleCI app. ie https://app.circleci.com/settings/organization/<vcs>/<org name>/overview
    * API Personal Access Token - https://circleci.com/docs/managing-api-tokens/

    __Report Fields__

    |                                       | Field                         | Description|
    |---------------------------------------|-------------------------------||
    |                                       | organization_id               | The org|
    |                                       | organization_name             | The org name|
    |                                       | organization_created_date     | The date (UTC) that the org was created                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
    | Project-level attributes              | project_id                    | The project ID / token|
    |                                       | project_name                  | The project name. For classic orgs, the project name is inherited from Github. For standalone, the org is set by the user|
    |                                       | project_created_date          | The date (UTC) that the project was created. For classic orgs, this is the date that the repo was authorized on CircleCI. For standalone orgs, this is the date that the project was created on Circle|
    |                                       | last_build_finished_at        | The date (UTC) of the last pipeline run on this project|
    | Pipeline-level attributes             | vcs_name                      | The name of the VCS connected to the project on which the pipeline was run|
    |                                       | vcs_url                       | The URL of the VCS on which the pipeline was run|
    |                                       | vcs_branch                    | The branch on which the pipeline was run                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
    |                                       | pipeline_id                   | The ID of the pipeline instance that was triggered. If a pipeline is re-run, it will share the same pipeline ID as the original pipeline instance                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
    |                                       | pipeline_created_at           | The date (UTC) the pipeline instance was first triggered|
    |                                       | pipeline_number               | The pipeline number|
    |                                       | is_unregistered_user          | Y/N flag of whether the pipeline was triggered by a CircleCI user or a user not registered on CircleCI. Examples of the latter include users who commit on a connected VCS and consume credits on Circle|
    |                                       | pipeline_trigger_source       | The source of the pipeline instance trigger (API, webhook, etc.)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
    |                                       | pipeline_trigger_user_id      | The user ID / token of the user who triggered the pipeline                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |
    | Workflow-level attributes             | workflow_id                   | The ID of the workflow instance that was triggered|
    |                                       | workflow_name                 | The name of the workflow|
    |                                       | workflow_first_job_queued_at  | The timestamp (UTC) of when the workflow instance started to queue|
    |                                       | workflow_first_job_started_at | The timestamp (UTC) of when the workflow instance started to run|
    |                                       | workflow_stopped_at           | The timestamp (UTC) of when the workflow instance stopped                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
    |                                       | is_workflow_successful        | Y/N flag of whether all jobs in the workflow were successfully ran|
    | Job-level attributes                  | job_name                      | The name of the job (the name the customer sees in the UI)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |
    |                                       | job_id                        | The ID of the job run instance that was triggered|
    |                                       | job_run_number                | The number of the job run instance that was triggered|
    |                                       | job_run_date                  | The date (UTC) of the job run instance began|
    |                                       | job_run_queued_at             | The timestamp (UTC) of when the job started to queue|
    |                                       | job_run_started_at            | The timestamp (UTC) of when the job started to run|
    |                                       | job_run_stopped_at            | The timestamp (UTC) of when the job stopped|
    |                                       | job_build_status              | The status of the job run instance|
    |                                       | resource_class                | The resource class of the job run instance|
    |                                       | operating_system              | The operating system of the job run instance|
    |                                       | executor                      | The executor of the job run instance|
    |                                       | parallelism                   | The parallelism of the job run instance|
    |                                       | job_run_seconds               | The duration in seconds of the job run instance|
    |                                       | median_cpu_utilization_pct    | The median CPU utilization calculated over the course of the entire job run instance. CPU utilization is logged every 15 seconds. It will not be available for any jobs under 15 seconds and occasionally will not be available for jobs greater than 15 seconds.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
    |                                       | max_cpu_utilization_pct       | The max CPU utilization logged over the course of the entire job run instance. CPU utilization is logged every 15 seconds. It will not be available for any jobs under 15 seconds and occasionally will not be available for jobs greater than 15 seconds.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |
    |                                       | median_ram_utilization_pct    | The median RAM utilization calculated over the course of the entire job run instance. RAM utilization is logged every 15 seconds. It will not be available for any jobs under 15 seconds and occasionally will not be available for jobs greater than 15 seconds.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
    |                                       | max_ram_utilization_pct       | The max RAM utilization logged over the course of the entire job run instance. RAM utilization is logged every 15 seconds. It will not be available for any jobs under 15 seconds and occasionally will not be available for jobs greater than 15 seconds.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |
    | Credit consumption metrics            | compute_credits               | The compute credits consumed by this job run instance|
    |                                       | dlc_credits                   | The docker-layer caching credits consumed by this job run instance|
    |                                       | user_credits                  | The user credits consumed by this job run instance|
    |                                       | storage_credits               | The storage credits consumed by this job run instance. Note: When an organization is below its allocated storage threshold, a job that uses storage will have 0 storage credits applied. The organization's included storage threshold can be found on the [CircleCI web app](https://app.circleci.com/home) by navigating to **Plan > Plan Usage|
    |                                       | network_credits               | The network credits consumed by this job run instance|
    |                                       | lease_credits                 | The lease credits consumed by this job run instance|
    |                                       | lease_overage_credits         | The lease overage credits consumed by this job run instance|
    |                                       | ipranges_credits              | The IP ranges credits consumed by this job run instance|
    |                                       | total_credits                 | The total credits consumed by this job run instance|
paths:
  /context:
    get:
      tags:
      - Context
      summary: List contexts
      description: List all contexts for an owner.
      operationId: listContexts
      parameters:
      - name: owner-id
        in: query
        description: The unique ID of the owner of the context. Specify either this
          or owner-slug.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uuid
      - name: owner-slug
        in: query
        description: A string that represents an organization. Specify either this
          or owner-id. Cannot be used for accounts.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: owner-type
        in: query
        description: The type of the owner. Defaults to "organization". Accounts are
          only used as context owners in server.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - account
          - organization
      - name: page-token
        in: query
        description: A token to retrieve the next page of results.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A paginated list of contexts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/context',
            qs: {
              'owner-id': 'c65b68ef-e73b-4bf2-be9a-7a322a9df150',
              'page-token': 'NEXT_PAGE_TOKEN'
            },
            headers: {'Circle-Token': 'CIRCLE_TOKEN'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection('circleci.com')

          headers = { 'Circle-Token': 'CIRCLE_TOKEN' }

          conn.request('GET', '/api/v2/context?owner-id=c65b68ef-e73b-4bf2-be9a-7a322a9df150&page-token=NEXT_PAGE_TOKEN', headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode('utf-8'))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context?owner-id=c65b68ef-e73b-4bf2-be9a-7a322a9df150&page-token=NEXT_PAGE_TOKEN\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Circle-Token\", \"CIRCLE_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/context?owner-id=c65b68ef-e73b-4bf2-be9a-7a322a9df150&page-token=NEXT_PAGE_TOKEN' \
            --header "Circle-Token: ${CIRCLE_TOKEN}"
      - lang: Ruby + Native
        source: |-
          require 'uri'
          require 'net/http'
          require 'openssl'

          url = URI('https://circleci.com/api/v2/context?owner-id=c65b68ef-e73b-4bf2-be9a-7a322a9df150&page-token=NEXT_PAGE_TOKEN')

          http = Net::HTTP.new(url.host, url.port)
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE

          request = Net::HTTP::Get.new(url)
          request['Circle-Token'] = 'CIRCLE_TOKEN'

          response = http.request(request)
          puts response.read_body
    post:
      tags:
      - Context
      summary: Create a new context
      description: Creates a new context.
      operationId: createContext
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/context_body"
      responses:
        "200":
          description: The new context
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Context"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/context',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              name: 'string',
              owner: {id: '497f6eca-6276-4993-bfeb-53cbbbba6f08', type: 'organization'}
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"name\":\"string\",\"owner\":{\"id\":\"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\"type\":\"organization\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/context", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"owner\\\
          \":{\\\"id\\\":\\\"497f6eca-6276-4993-bfeb-53cbbbba6f08\\\",\\\"type\\\"\
          :\\\"organization\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url,\
          \ payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\
          \treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\t\
          res, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/context \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"name":"string","owner":{"id":"497f6eca-6276-4993-bfeb-53cbbbba6f08","type":"organization"}}'
  /context/{context-id}:
    get:
      tags:
      - Context
      summary: Get a context
      description: Returns basic information about a context.
      operationId: getContext
      parameters:
      - name: context-id
        in: path
        description: ID of the context (UUID)
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: The context
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Context"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/context/%7Bcontext-id%7D',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/context/%7Bcontext-id%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/%7Bcontext-id%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/context/%7Bcontext-id%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    delete:
      tags:
      - Context
      summary: Delete a context
      operationId: deleteContext
      parameters:
      - name: context-id
        in: path
        description: ID of the context (UUID)
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: A confirmation message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'DELETE',
            url: 'https://circleci.com/api/v2/context/%7Bcontext-id%7D',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/api/v2/context/%7Bcontext-id%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/%7Bcontext-id%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://circleci.com/api/v2/context/%7Bcontext-id%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /context/{context-id}/environment-variable:
    get:
      tags:
      - Context
      summary: List environment variables
      description: "List information about environment variables in a context, not\
        \ including their values."
      operationId: listEnvironmentVariablesFromContext
      parameters:
      - name: context-id
        in: path
        description: ID of the context (UUID)
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      - name: page-token
        in: query
        description: A token to retrieve the next page of results.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A paginated list of environment variables
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_1"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable',
            qs: {'page-token': 'SOME_STRING_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/context/%7Bcontext-id%7D/environment-variable?page-token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable?page-token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable?page-token=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /context/{context-id}/environment-variable/{env-var-name}:
    put:
      tags:
      - Context
      summary: Add or update an environment variable
      description: "Create or update an environment variable within a context. Returns\
        \ information about the environment variable, not including its value."
      operationId: addEnvironmentVariableToContext
      parameters:
      - name: context-id
        in: path
        description: ID of the context (UUID)
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      - name: env-var-name
        in: path
        description: The name of the environment variable
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: POSTGRES_USER
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/environmentvariable_envvarname_body"
      responses:
        "200":
          description: The new environment variable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_2"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'PUT',
            url: 'https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {value: 'some-secret-value'},
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"value\":\"some-secret-value\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"value\\\":\\\"some-secret-value\\\
          \"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"value":"some-secret-value"}'
    delete:
      tags:
      - Context
      summary: Remove an environment variable
      description: Delete an environment variable from a context.
      operationId: deleteEnvironmentVariableFromContext
      parameters:
      - name: env-var-name
        in: path
        description: The name of the environment variable
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: POSTGRES_USER
      - name: context-id
        in: path
        description: ID of the context (UUID)
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: A confirmation message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'DELETE',
            url: 'https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /insights/pages/{project-slug}/summary:
    get:
      tags:
      - Insights
      summary: Get summary metrics and trends for a project across it's workflows
        and branches
      description: |-
        Get summary metrics and trends for a project at workflow and branch level.
                     Workflow runs going back at most 90 days are included in the aggregation window.
                     Trends are only supported upto last 30 days.
                     Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
      operationId: getProjectWorkflowsPageData
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: reporting-window
        in: query
        description: "The time window used to calculate summary metrics. If not provided,\
          \ defaults to last-90-days"
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - last-7-days
          - last-90-days
          - last-24-hours
          - last-30-days
          - last-60-days
        example: last-90-days
      - name: branches
        in: query
        description: The names of VCS branches to include in branch-level workflow
          metrics.
        required: false
        style: form
        explode: true
        schema:
          type: object
        example: "A single branch: ?branches=main or for multiple branches: ?branches=main&branches=feature&branches=dev"
      - name: workflow-names
        in: query
        description: The names of workflows to include in workflow-level metrics.
        required: false
        style: form
        explode: true
        schema:
          type: object
        example: |-
          A single workflow name: ?workflow-names=build-test-deploy or
              for multiple workflow names: ?workflow-names=build&workflow-names=test-and-deploy.
      responses:
        "200":
          description: Aggregated summary metrics and trends by workflow and branches
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_3"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/insights/pages/gh/CircleCI-Public/api-preview-docs/summary',
            qs: {
              'reporting-window': 'SOME_STRING_VALUE',
              branches: 'SOME_OBJECT_VALUE',
              'workflow-names': 'SOME_OBJECT_VALUE'
            },
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/insights/pages/gh/CircleCI-Public/api-preview-docs/summary?reporting-window=SOME_STRING_VALUE&branches=SOME_OBJECT_VALUE&workflow-names=SOME_OBJECT_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/insights/pages/gh/CircleCI-Public/api-preview-docs/summary?reporting-window=SOME_STRING_VALUE&branches=SOME_OBJECT_VALUE&workflow-names=SOME_OBJECT_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/insights/pages/gh/CircleCI-Public/api-preview-docs/summary?reporting-window=SOME_STRING_VALUE&branches=SOME_OBJECT_VALUE&workflow-names=SOME_OBJECT_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /insights/time-series/{project-slug}/workflows/{workflow-name}/jobs:
    get:
      tags:
      - Insights
      summary: Job timeseries data
      description: Get timeseries data for all jobs within a workflow. Hourly granularity
        data is only retained for 48 hours while daily granularity data is retained
        for 90 days.
      operationId: getJobTimeseries
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: workflow-name
        in: path
        description: The name of the workflow.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: build-and-test
      - name: branch
        in: query
        description: The name of a vcs branch. If not passed we will scope the API
          call to the default branch.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: granularity
        in: query
        description: The granularity for which to query timeseries data.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - daily
          - hourly
        example: hourly
      - name: start-date
        in: query
        description: Include only executions that started at or after this date. This
          must be specified if an end-date is provided.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        example: 2020-08-21T13:26:29Z
      - name: end-date
        in: query
        description: Include only executions that started before this date. This date
          can be at most 90 days after the start-date.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        example: 2020-09-04T13:26:29Z
      responses:
        "200":
          description: "An array of timeseries data, one entry per job."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_4"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/insights/time-series/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/jobs',
            qs: {
              branch: 'SOME_STRING_VALUE',
              granularity: 'SOME_STRING_VALUE',
              'start-date': 'SOME_STRING_VALUE',
              'end-date': 'SOME_STRING_VALUE'
            },
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/insights/time-series/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/jobs?branch=SOME_STRING_VALUE&granularity=SOME_STRING_VALUE&start-date=SOME_STRING_VALUE&end-date=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/insights/time-series/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/jobs?branch=SOME_STRING_VALUE&granularity=SOME_STRING_VALUE&start-date=SOME_STRING_VALUE&end-date=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/insights/time-series/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/jobs?branch=SOME_STRING_VALUE&granularity=SOME_STRING_VALUE&start-date=SOME_STRING_VALUE&end-date=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /insights/{org-slug}/summary:
    get:
      tags:
      - Insights
      summary: "Get summary metrics with trends for the entire org, and for each project."
      description: |-
        Gets aggregated summary metrics with trends for the entire org.
                      Also gets aggregated metrics and trends for each project belonging to the org.
      operationId: getOrgSummaryData
      parameters:
      - name: org-slug
        in: path
        description: Org slug in the form `vcs-slug/org-name`. The `/` characters
          may be URL-escaped.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: gh/CircleCI-Public
      - name: reporting-window
        in: query
        description: "The time window used to calculate summary metrics. If not provided,\
          \ defaults to last-90-days"
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - last-7-days
          - last-90-days
          - last-24-hours
          - last-30-days
          - last-60-days
        example: last-90-days
      - name: project-names
        in: query
        description: List of project names.
        required: false
        style: form
        explode: true
        schema:
          type: object
        example: "For a single project: ?project-names=some-project or for multiple\
          \ projects: ?project-names=some-project1&project-names=some-project2"
      responses:
        "200":
          description: summary metrics with trends for an entire org and it's projects.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_5"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/summary',
            qs: {'reporting-window': 'SOME_STRING_VALUE', 'project-names': 'SOME_OBJECT_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/insights/gh/CircleCI-Public/summary?reporting-window=SOME_STRING_VALUE&project-names=SOME_OBJECT_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/insights/gh/CircleCI-Public/summary?reporting-window=SOME_STRING_VALUE&project-names=SOME_OBJECT_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/summary?reporting-window=SOME_STRING_VALUE&project-names=SOME_OBJECT_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /insights/{project-slug}/branches:
    get:
      tags:
      - Insights
      summary: Get all branches for a project
      description: "Get a list of all branches for a specified project. The list will\
        \ only contain branches currently available within Insights. The maximum number\
        \ of branches returned by this endpoint is 5,000."
      operationId: getAllInsightsBranches
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: workflow-name
        in: query
        description: The name of a workflow. If not passed we will scope the API call
          to the project.
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: build-and-test
      responses:
        "200":
          description: A list of branches for a project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_6"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/branches',
            qs: {'workflow-name': 'SOME_STRING_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/insights/gh/CircleCI-Public/api-preview-docs/branches?workflow-name=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/branches?workflow-name=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/branches?workflow-name=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /insights/{project-slug}/flaky-tests:
    get:
      tags:
      - Insights
      summary: Get flaky tests for a project
      description: |-
        Get a list of flaky tests for a given project. Flaky tests are branch agnostic.
                     A flaky test is a test that passed and failed in the same commit.
      operationId: getFlakyTests
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      responses:
        "200":
          description: A list of flaky tests for a project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_7"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/flaky-tests',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/insights/gh/CircleCI-Public/api-preview-docs/flaky-tests", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/flaky-tests\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/flaky-tests \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /insights/{project-slug}/workflows:
    get:
      tags:
      - Insights
      summary: Get summary metrics for a project's workflows
      description: "Get summary metrics for a project's workflows.  Workflow runs\
        \ going back at most 90 days are included in the aggregation window. Metrics\
        \ are refreshed daily, and thus may not include executions from the last 24\
        \ hours.  Please note that Insights is not a financial reporting tool and\
        \ should not be used for precise credit reporting.  Credit reporting from\
        \ Insights does not use the same source of truth as the billing information\
        \ that is found in the Plan Overview page in the CircleCI UI, nor does the\
        \ underlying data have the same data accuracy guarantees as the billing information\
        \ in the CircleCI UI.  This may lead to discrepancies between credits reported\
        \ from Insights and the billing information in the Plan Overview page of the\
        \ CircleCI UI.  For precise credit reporting, always use the Plan Overview\
        \ page in the CircleCI UI."
      operationId: getProjectWorkflowMetrics
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: page-token
        in: query
        description: A token to retrieve the next page of results.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      - name: all-branches
        in: query
        description: Whether to retrieve data for all branches combined. Use either
          this parameter OR the branch name parameter.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: branch
        in: query
        description: The name of a vcs branch. If not passed we will scope the API
          call to the default branch.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: reporting-window
        in: query
        description: "The time window used to calculate summary metrics. If not provided,\
          \ defaults to last-90-days"
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - last-7-days
          - last-90-days
          - last-24-hours
          - last-30-days
          - last-60-days
        example: last-90-days
      responses:
        "200":
          description: A paginated list of summary metrics by workflow
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_8"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows',
            qs: {
              'page-token': 'SOME_STRING_VALUE',
              'all-branches': 'SOME_BOOLEAN_VALUE',
              branch: 'SOME_STRING_VALUE',
              'reporting-window': 'SOME_STRING_VALUE'
            },
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows?page-token=SOME_STRING_VALUE&all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE&reporting-window=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows?page-token=SOME_STRING_VALUE&all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE&reporting-window=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows?page-token=SOME_STRING_VALUE&all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE&reporting-window=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /insights/{project-slug}/workflows/{workflow-name}:
    get:
      tags:
      - Insights
      summary: Get recent runs of a workflow
      description: "Get recent runs of a workflow. Runs going back at most 90 days\
        \ are returned. Please note that Insights is not a financial reporting tool\
        \ and should not be used for precise credit reporting.  Credit reporting from\
        \ Insights does not use the same source of truth as the billing information\
        \ that is found in the Plan Overview page in the CircleCI UI, nor does the\
        \ underlying data have the same data accuracy guarantees as the billing information\
        \ in the CircleCI UI.  This may lead to discrepancies between credits reported\
        \ from Insights and the billing information in the Plan Overview page of the\
        \ CircleCI UI.  For precise credit reporting, always use the Plan Overview\
        \ page in the CircleCI UI."
      operationId: getProjectWorkflowRuns
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: workflow-name
        in: path
        description: The name of the workflow.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: build-and-test
      - name: all-branches
        in: query
        description: Whether to retrieve data for all branches combined. Use either
          this parameter OR the branch name parameter.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: branch
        in: query
        description: The name of a vcs branch. If not passed we will scope the API
          call to the default branch.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page-token
        in: query
        description: A token to retrieve the next page of results.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      - name: start-date
        in: query
        description: Include only executions that started at or after this date. This
          must be specified if an end-date is provided.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        example: 2020-08-21T13:26:29Z
      - name: end-date
        in: query
        description: Include only executions that started before this date. This date
          can be at most 90 days after the start-date.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        example: 2020-09-04T13:26:29Z
      responses:
        "200":
          description: A paginated list of recent workflow runs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_9"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test',
            qs: {
              'all-branches': 'SOME_BOOLEAN_VALUE',
              branch: 'SOME_STRING_VALUE',
              'page-token': 'SOME_STRING_VALUE',
              'start-date': 'SOME_STRING_VALUE',
              'end-date': 'SOME_STRING_VALUE'
            },
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test?all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE&page-token=SOME_STRING_VALUE&start-date=SOME_STRING_VALUE&end-date=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test?all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE&page-token=SOME_STRING_VALUE&start-date=SOME_STRING_VALUE&end-date=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test?all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE&page-token=SOME_STRING_VALUE&start-date=SOME_STRING_VALUE&end-date=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /insights/{project-slug}/workflows/{workflow-name}/jobs:
    get:
      tags:
      - Insights
      summary: Get summary metrics for a project workflow's jobs.
      description: "Get summary metrics for a project workflow's jobs. Job runs going\
        \ back at most 90 days are included in the aggregation window. Metrics are\
        \ refreshed daily, and thus may not include executions from the last 24 hours.\
        \ Please note that Insights is not a financial reporting tool and should not\
        \ be used for precise credit reporting.  Credit reporting from Insights does\
        \ not use the same source of truth as the billing information that is found\
        \ in the Plan Overview page in the CircleCI UI, nor does the underlying data\
        \ have the same data accuracy guarantees as the billing information in the\
        \ CircleCI UI.  This may lead to discrepancies between credits reported from\
        \ Insights and the billing information in the Plan Overview page of the CircleCI\
        \ UI.  For precise credit reporting, always use the Plan Overview page in\
        \ the CircleCI UI."
      operationId: getProjectWorkflowJobMetrics
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: workflow-name
        in: path
        description: The name of the workflow.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: build-and-test
      - name: page-token
        in: query
        description: A token to retrieve the next page of results.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      - name: all-branches
        in: query
        description: Whether to retrieve data for all branches combined. Use either
          this parameter OR the branch name parameter.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: branch
        in: query
        description: The name of a vcs branch. If not passed we will scope the API
          call to the default branch.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: reporting-window
        in: query
        description: "The time window used to calculate summary metrics. If not provided,\
          \ defaults to last-90-days"
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - last-7-days
          - last-90-days
          - last-24-hours
          - last-30-days
          - last-60-days
        example: last-90-days
      - name: job-name
        in: query
        description: "The name of the jobs you would like to filter from your workflow.\
          \ If not specified, all workflow jobs will be returned. The job name can\
          \ either be the full job name or just a substring of the job name."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: lint
      responses:
        "200":
          description: A paginated list of summary metrics by workflow job.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_10"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/jobs',
            qs: {
              'page-token': 'SOME_STRING_VALUE',
              'all-branches': 'SOME_BOOLEAN_VALUE',
              branch: 'SOME_STRING_VALUE',
              'reporting-window': 'SOME_STRING_VALUE',
              'job-name': 'SOME_STRING_VALUE'
            },
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/jobs?page-token=SOME_STRING_VALUE&all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE&reporting-window=SOME_STRING_VALUE&job-name=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/jobs?page-token=SOME_STRING_VALUE&all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE&reporting-window=SOME_STRING_VALUE&job-name=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/jobs?page-token=SOME_STRING_VALUE&all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE&reporting-window=SOME_STRING_VALUE&job-name=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /insights/{project-slug}/workflows/{workflow-name}/summary:
    get:
      tags:
      - Insights
      summary: Get metrics and trends for workflows
      description: Get the metrics and trends for a particular workflow on a single
        branch or all branches
      operationId: getWorkflowSummary
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: workflow-name
        in: path
        description: The name of the workflow.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: build-and-test
      - name: all-branches
        in: query
        description: Whether to retrieve data for all branches combined. Use either
          this parameter OR the branch name parameter.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: branch
        in: query
        description: The name of a vcs branch. If not passed we will scope the API
          call to the default branch.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Metrics and trends for a workflow
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_11"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/summary',
            qs: {'all-branches': 'SOME_BOOLEAN_VALUE', branch: 'SOME_STRING_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/summary?all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/summary?all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/summary?all-branches=SOME_BOOLEAN_VALUE&branch=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /insights/{project-slug}/workflows/{workflow-name}/test-metrics:
    get:
      tags:
      - Insights
      summary: Get test metrics for a project's workflows
      description: Get test metrics for a project's workflows. Currently tests metrics
        are calculated based on 10 most recent workflow runs.
      operationId: getProjectWorkflowTestMetrics
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: workflow-name
        in: path
        description: The name of the workflow.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: build-and-test
      - name: branch
        in: query
        description: The name of a vcs branch. If not passed we will scope the API
          call to the default branch.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: all-branches
        in: query
        description: Whether to retrieve data for all branches combined. Use either
          this parameter OR the branch name parameter.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: A list of test metrics by workflow
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_12"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/test-metrics',
            qs: {branch: 'SOME_STRING_VALUE', 'all-branches': 'SOME_BOOLEAN_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/test-metrics?branch=SOME_STRING_VALUE&all-branches=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/test-metrics?branch=SOME_STRING_VALUE&all-branches=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/insights/gh/CircleCI-Public/api-preview-docs/workflows/build-and-test/test-metrics?branch=SOME_STRING_VALUE&all-branches=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /jobs/{job-id}/cancel:
    post:
      tags:
      - Job
      summary: Cancel job by job ID
      description: Cancel job with a given job ID.
      operationId: cancelJobByJobID
      parameters:
      - name: job-id
        in: path
        description: The unique ID of the job.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Job cancelled successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Bad request error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          description: Unauthorized error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "403":
          description: Forbidden error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          description: Job not found error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/jobs/%7Bjob-id%7D/cancel',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/api/v2/jobs/%7Bjob-id%7D/cancel", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/jobs/%7Bjob-id%7D/cancel\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/jobs/%7Bjob-id%7D/cancel \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /me:
    get:
      tags:
      - User
      summary: User Information
      description: Provides information about the user that is currently signed in.
      operationId: getCurrentUser
      responses:
        "200":
          description: User login information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/me',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/me", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/me\"\n\n\t\
          req, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/me \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /me/collaborations:
    get:
      tags:
      - User
      summary: Collaborations
      description: |-
        Provides the set of organizations of which a user is a member or a collaborator.

        The set of organizations that a user can collaborate on is composed of:

        * Organizations that the current user belongs to across VCS types (e.g. BitBucket, GitHub)
        * The parent organization of repository that the user can collaborate on, but is not necessarily a member of
        * The organization of the current user's account
      operationId: getCollaborations
      responses:
        "200":
          description: Collaborations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collaboration"
                x-content-type: application/json
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/me/collaborations',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/me/collaborations", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/me/collaborations\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/me/collaborations \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /pipeline:
    get:
      tags:
      - Pipeline
      summary: Get a list of pipelines
      description: Returns all pipelines for the most recently built projects (max
        250) you follow in an organization.
      operationId: listPipelines
      parameters:
      - name: org-slug
        in: query
        description: "Org slug in the form `vcs-slug/org-name`. For projects that\
          \ use GitLab or GitHub App, use `circleci` as the `vcs-slug` and replace\
          \ the `org-name` with the organization ID (found in Organization Settings)."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: gh/CircleCI-Public
      - name: page-token
        in: query
        description: A token to retrieve the next page of results.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      - name: mine
        in: query
        description: Only include entries created by your user.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: A sequence of pipelines.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineListResponse"
          links:
            NextPipelinePage:
              operationId: listPipelines
              parameters:
                page-token: $response.body#/next_page_token
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/pipeline',
            qs: {
              'org-slug': 'SOME_STRING_VALUE',
              'page-token': 'SOME_STRING_VALUE',
              mine: 'SOME_BOOLEAN_VALUE'
            },
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/pipeline?org-slug=SOME_STRING_VALUE&page-token=SOME_STRING_VALUE&mine=SOME_BOOLEAN_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/pipeline?org-slug=SOME_STRING_VALUE&page-token=SOME_STRING_VALUE&mine=SOME_BOOLEAN_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/pipeline?org-slug=SOME_STRING_VALUE&page-token=SOME_STRING_VALUE&mine=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /pipeline/continue:
    post:
      tags:
      - Pipeline
      summary: Continue a pipeline
      description: "Continue a pipeline from the setup phase. For information on using\
        \ pipeline parameters with dynamic configuration, see the [Pipeline values\
        \ and parameters](https://circleci.com/docs/pipeline-variables/#pipeline-parameters-and-dynamic-configuration)\
        \ docs."
      operationId: continuePipeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pipeline_continue_body"
      responses:
        "200":
          description: A confirmation message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/pipeline/continue',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              'continuation-key': 'string',
              configuration: 'string',
              parameters: {deploy_prod: true}
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"continuation-key\":\"string\",\"configuration\":\"string\",\"parameters\":{\"deploy_prod\":true}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/pipeline/continue", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/pipeline/continue\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"continuation-key\\\":\\\"string\\\
          \",\\\"configuration\\\":\\\"string\\\",\\\"parameters\\\":{\\\"deploy_prod\\\
          \":true}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\t\
          req.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/pipeline/continue \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"continuation-key":"string","configuration":"string","parameters":{"deploy_prod":true}}'
  /pipeline/{pipeline-id}:
    get:
      tags:
      - Pipeline
      summary: Get a pipeline by ID
      description: Returns a pipeline by the pipeline ID.
      operationId: getPipelineById
      parameters:
      - name: pipeline-id
        in: path
        description: The unique ID of the pipeline.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
        example: 5034460f-c7c4-4c43-9457-de07e2029e7b
      responses:
        "200":
          description: A pipeline object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
          links:
            ProjectFromPipeline:
              operationId: getProjectBySlug
              parameters:
                project_slug: $response.body#/project_slug
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /pipeline/{pipeline-id}/config:
    get:
      tags:
      - Pipeline
      summary: Get a pipeline's configuration
      description: Returns a pipeline's configuration by ID.
      operationId: getPipelineConfigById
      parameters:
      - name: pipeline-id
        in: path
        description: The unique ID of the pipeline.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
        example: 5034460f-c7c4-4c43-9457-de07e2029e7b
      responses:
        "200":
          description: The configuration strings for the pipeline.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineConfig"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/config',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/config", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/config\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/config \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /pipeline/{pipeline-id}/values:
    get:
      tags:
      - Pipeline
      summary: Get pipeline values for a pipeline
      description: "Returns a map of pipeline values by pipeline ID. For more information\
        \ see the [pipeline values reference page](https://circleci.com/docs/variables/#pipeline-values)."
      operationId: getPipelineValuesById
      parameters:
      - name: pipeline-id
        in: path
        description: The unique ID of the pipeline.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
        example: 5034460f-c7c4-4c43-9457-de07e2029e7b
      responses:
        "200":
          description: A JSON object of pipeline values
          content:
            application/json:
              schema:
                title: PipelineValues
                type: object
                additionalProperties:
                  anyOf:
                  - type: string
                  - type: integer
                    format: int64
                  - type: boolean
                description: The pipeline-values for the pipeline.
                x-content-type: application/json
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/values',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/values", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/values\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/values \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /pipeline/{pipeline-id}/workflow:
    get:
      tags:
      - Pipeline
      summary: Get a pipeline's workflows
      description: Returns a paginated list of workflows by pipeline ID.
      operationId: listWorkflowsByPipelineId
      parameters:
      - name: pipeline-id
        in: path
        description: The unique ID of the pipeline.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
        example: 5034460f-c7c4-4c43-9457-de07e2029e7b
      - name: page-token
        in: query
        description: A token to retrieve the next page of results.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A paginated list of workflow objects.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowListResponse"
          links:
            NextPipelineWorkflowsPage:
              operationId: listWorkflowsByPipelineId
              parameters:
                pipeline-id: $request.path.pipeline-id
                page-token: $response.body#/next_page_token
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/workflow',
            qs: {'page-token': 'SOME_STRING_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/workflow?page-token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/workflow?page-token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/pipeline/5034460f-c7c4-4c43-9457-de07e2029e7b/workflow?page-token=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{project-slug}:
    get:
      tags:
      - Project
      summary: Get a project
      description: Retrieves a project by project slug.
      operationId: getProjectBySlug
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      responses:
        "200":
          description: A project object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{project-slug}/checkout-key:
    get:
      tags:
      - Project
      summary: Get all checkout keys
      description: Returns a sequence of checkout keys for `:project`.
      operationId: listCheckoutKeys
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: digest
        in: query
        description: "The fingerprint digest type to return. This may be either `md5`\
          \ or `sha256`. If not passed, defaults to `md5`."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - sha256
          - md5
      responses:
        "200":
          description: A sequence of checkout keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutKeyListResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key',
            qs: {digest: 'SOME_STRING_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key?digest=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key?digest=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key?digest=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    post:
      tags:
      - Project
      summary: Create a new checkout key
      description: |-
        Not available to projects that use GitLab or GitHub App. Creates a new checkout key. This API request is only usable with a user API token.
                                   Please ensure that you have authorized your account with GitHub before creating user keys.
                                   This is necessary to give CircleCI the permission to create a user key associated with
                                   your GitHub user account. You can find this page by visiting Project Settings > Checkout SSH Keys
      operationId: createCheckoutKey
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutKeyInput"
      responses:
        "201":
          description: The checkout key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutKey"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {type: 'deploy-key'},
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"type\":\"deploy-key\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"type\\\":\\\"deploy-key\\\"}\"\
          )\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"type":"deploy-key"}'
  /project/{project-slug}/checkout-key/{fingerprint}:
    get:
      tags:
      - Project
      summary: Get a checkout key
      description: Returns an individual checkout key via md5 or sha256 fingerprint.
        sha256 keys should be url-encoded.
      operationId: getCheckoutKey
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: fingerprint
        in: path
        description: An SSH key fingerprint.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f
      responses:
        "200":
          description: The checkout key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutKey"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    delete:
      tags:
      - Project
      summary: Delete a checkout key
      description: Deletes the checkout key via md5 or sha256 fingerprint. sha256
        keys should be url-encoded.
      operationId: deleteCheckoutKey
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: fingerprint
        in: path
        description: An SSH key fingerprint.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f
      responses:
        "200":
          description: A confirmation message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'DELETE',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{project-slug}/envvar:
    get:
      tags:
      - Project
      summary: List all environment variables
      description: "Returns four 'x' characters, in addition to the last four ASCII\
        \ characters of the value, consistent with the display of environment variable\
        \ values on the CircleCI website."
      operationId: listEnvVars
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      responses:
        "200":
          description: A sequence of environment variables.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvironmentVariableListResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    post:
      tags:
      - Project
      summary: Create an environment variable
      description: Creates a new environment variable.
      operationId: createEnvVar
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentVariable"
      responses:
        "201":
          description: The environment variable.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvironmentVariable_1"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {name: 'foo', value: 'xxxx1234'},
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"name\":\"foo\",\"value\":\"xxxx1234\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"foo\\\",\\\"value\\\
          \":\\\"xxxx1234\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"name":"foo","value":"xxxx1234"}'
  /project/{project-slug}/envvar/{name}:
    get:
      tags:
      - Project
      summary: Get a masked environment variable
      description: Returns the masked value of environment variable :name.
      operationId: getEnvVar
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: name
        in: path
        description: The name of the environment variable.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: foo
      responses:
        "200":
          description: The environment variable.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnvironmentVariable_1"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    delete:
      tags:
      - Project
      summary: Delete an environment variable
      description: Deletes the environment variable named :name.
      operationId: deleteEnvVar
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: name
        in: path
        description: The name of the environment variable.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: foo
      responses:
        "200":
          description: A confirmation message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'DELETE',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{project-slug}/job/{job-number}:
    get:
      tags:
      - Job
      summary: Get job details
      description: Returns job details.
      operationId: getJobDetails
      parameters:
      - name: job-number
        in: path
        description: The number of the job.
        required: true
        style: simple
        explode: false
        schema: {}
        example: "123"
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      responses:
        "200":
          description: Job details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job Details"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/job/123',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/job/123", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/job/123\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/job/123 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{project-slug}/job/{job-number}/cancel:
    post:
      tags:
      - Job
      summary: Cancel job by job number
      description: Cancel job with a given job number.
      operationId: cancelJobByJobNumber
      parameters:
      - name: job-number
        in: path
        description: The number of the job.
        required: true
        style: simple
        explode: false
        schema: {}
        example: "123"
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/job/123/cancel',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/job/123/cancel", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/job/123/cancel\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/job/123/cancel \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{project-slug}/pipeline:
    get:
      tags:
      - Pipeline
      summary: Get all pipelines
      description: Returns all pipelines for this project.
      operationId: listPipelinesForProject
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: branch
        in: query
        description: The name of a vcs branch.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      - name: page-token
        in: query
        description: A token to retrieve the next page of results.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A sequence of pipelines.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineListResponse"
          links:
            NextPipelinePage:
              operationId: listPipelinesForProject
              parameters:
                project-slug: $request.path.project-slug
                page-token: $response.body#/next_page_token
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline',
            qs: {branch: 'SOME_STRING_VALUE', 'page-token': 'SOME_STRING_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline?branch=SOME_STRING_VALUE&page-token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline?branch=SOME_STRING_VALUE&page-token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline?branch=SOME_STRING_VALUE&page-token=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    post:
      tags:
      - Pipeline
      summary: Trigger a new pipeline
      description: "Not available to projects that use GitLab or GitHub App. Triggers\
        \ a new pipeline on the project. **GitHub App users should use the [new Trigger\
        \ Pipeline API](#tag/Pipeline/operation/triggerPipelineRun)**."
      operationId: triggerPipeline
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TriggerPipelineParameters"
      responses:
        "201":
          description: The created pipeline.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineCreation"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              branch: 'feature/design-new-api',
              tag: 'v3.1.4159',
              parameters: {deploy_prod: true}
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"branch\":\"feature/design-new-api\",\"tag\":\"v3.1.4159\",\"parameters\":{\"deploy_prod\":true}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"branch\\\":\\\"feature/design-new-api\\\
          \",\\\"tag\\\":\\\"v3.1.4159\\\",\\\"parameters\\\":{\\\"deploy_prod\\\"\
          :true}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\t\
          req.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"branch":"feature/design-new-api","tag":"v3.1.4159","parameters":{"deploy_prod":true}}'
  /project/{project-slug}/pipeline/mine:
    get:
      tags:
      - Pipeline
      summary: Get your pipelines
      description: Returns a sequence of all pipelines for this project triggered
        by the user.
      operationId: listMyPipelines
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: page-token
        in: query
        description: A token to retrieve the next page of results.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A sequence of pipelines.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineListResponse"
          links:
            NextPipelinePage:
              operationId: listMyPipelines
              parameters:
                project-slug: $request.path.project-slug
                page-token: $response.body#/next_page_token
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/mine',
            qs: {'page-token': 'SOME_STRING_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/mine?page-token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/mine?page-token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/mine?page-token=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{project-slug}/pipeline/{pipeline-number}:
    get:
      tags:
      - Pipeline
      summary: Get a pipeline by pipeline number
      description: Returns a pipeline by the pipeline number.
      operationId: getPipelineByNumber
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: pipeline-number
        in: path
        description: The number of the pipeline.
        required: true
        style: simple
        explode: false
        schema: {}
        example: "123"
      responses:
        "200":
          description: A pipeline object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
          links:
            ProjectFromPipeline:
              operationId: getProjectBySlug
              parameters:
                project_slug: $response.body#/project_slug
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/123',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/123", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/123\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/123 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{project-slug}/schedule:
    get:
      tags:
      - Schedule
      summary: Get all schedules
      description: Returns all schedules for this project.
      operationId: listSchedulesForProject
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      - name: page-token
        in: query
        description: A token to retrieve the next page of results.
        required: false
        allowEmptyValue: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A sequence of schedules.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_13"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/schedule',
            qs: {'page-token': 'SOME_STRING_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/schedule?page-token=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/schedule?page-token=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/schedule?page-token=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    post:
      tags:
      - Schedule
      summary: Create a schedule
      description: Not yet available to projects that use GitLab or GitHub App. Creates
        a schedule and returns the created schedule.
      operationId: createSchedule
      parameters:
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateScheduleParameters"
      responses:
        "201":
          description: A schedule object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/schedule',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              name: 'string',
              timetable: {
                'per-hour': 0,
                'hours-of-day': [0],
                'days-of-week': ['TUE'],
                'days-of-month': [0],
                months: ['MAR']
              },
              'attribution-actor': 'current',
              parameters: {deploy_prod: true, branch: 'feature/design-new-api'},
              description: 'string'
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"name\":\"string\",\"timetable\":{\"per-hour\":0,\"hours-of-day\":[0],\"days-of-week\":[\"TUE\"],\"days-of-month\":[0],\"months\":[\"MAR\"]},\"attribution-actor\":\"current\",\"parameters\":{\"deploy_prod\":true,\"branch\":\"feature/design-new-api\"},\"description\":\"string\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/schedule", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/schedule\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"timetable\\\
          \":{\\\"per-hour\\\":0,\\\"hours-of-day\\\":[0],\\\"days-of-week\\\":[\\\
          \"TUE\\\"],\\\"days-of-month\\\":[0],\\\"months\\\":[\\\"MAR\\\"]},\\\"\
          attribution-actor\\\":\\\"current\\\",\\\"parameters\\\":{\\\"deploy_prod\\\
          \":true,\\\"branch\\\":\\\"feature/design-new-api\\\"},\\\"description\\\
          \":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/schedule \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"name":"string","timetable":{"per-hour":0,"hours-of-day":[0],"days-of-week":["TUE"],"days-of-month":[0],"months":["MAR"]},"attribution-actor":"current","parameters":{"deploy_prod":true,"branch":"feature/design-new-api"},"description":"string"}'
  /project/{project-slug}/{job-number}/artifacts:
    get:
      tags:
      - Job
      summary: Get a job's artifacts
      description: Returns a job's artifacts.
      operationId: getJobArtifacts
      parameters:
      - name: job-number
        in: path
        description: The number of the job.
        required: true
        style: simple
        explode: false
        schema: {}
        example: "123"
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      responses:
        "200":
          description: A paginated list of the job's artifacts.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtifactListResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/123/artifacts',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/123/artifacts", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/123/artifacts\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/123/artifacts \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{project-slug}/{job-number}/tests:
    get:
      tags:
      - Job
      summary: Get test metadata
      description: "Get test metadata for a build. In the rare case where there is\
        \ more than 250MB of test data on the job, no results will be returned."
      operationId: getTests
      parameters:
      - name: job-number
        in: path
        description: The number of the job.
        required: true
        style: simple
        explode: false
        schema: {}
        example: "123"
      - name: project-slug
        in: path
        description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
          \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
          \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
          \ ID (found in Organization Settings), and replace `repo-name` with the\
          \ project ID (found in Project Settings)."
        required: true
        style: simple
        explode: false
        allowReserved: true
        schema:
          type: string
        example: gh/CircleCI-Public/api-preview-docs
      responses:
        "200":
          description: A paginated list of test results.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestsResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/123/tests',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/123/tests", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/123/tests\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/123/tests \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /schedule/{schedule-id}:
    get:
      tags:
      - Schedule
      summary: Get a schedule
      description: Get a schedule by id.
      operationId: getScheduleById
      parameters:
      - name: schedule-id
        in: path
        description: The unique ID of the schedule.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: A schedule object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/schedule/%7Bschedule-id%7D',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/schedule/%7Bschedule-id%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/schedule/%7Bschedule-id%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/schedule/%7Bschedule-id%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    delete:
      tags:
      - Schedule
      summary: Delete a schedule
      description: Not yet available to projects that use GitLab or GitHub App. Deletes
        the schedule by id.
      operationId: deleteScheduleById
      parameters:
      - name: schedule-id
        in: path
        description: The unique ID of the schedule.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: A confirmation message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'DELETE',
            url: 'https://circleci.com/api/v2/schedule/%7Bschedule-id%7D',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/api/v2/schedule/%7Bschedule-id%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/schedule/%7Bschedule-id%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://circleci.com/api/v2/schedule/%7Bschedule-id%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    patch:
      tags:
      - Schedule
      summary: Update a schedule
      description: Not yet available to projects that use GitLab or GitHub App. Updates
        a schedule and returns the updated schedule.
      operationId: updateSchedule
      parameters:
      - name: schedule-id
        in: path
        description: The unique ID of the schedule.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateScheduleParameters"
      responses:
        "200":
          description: A schedule object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'PATCH',
            url: 'https://circleci.com/api/v2/schedule/%7Bschedule-id%7D',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              description: 'string',
              name: 'string',
              timetable: {
                'per-hour': 0,
                'hours-of-day': [0],
                'days-of-week': ['TUE'],
                'days-of-month': [0],
                months: ['MAR']
              },
              'attribution-actor': 'current',
              parameters: {deploy_prod: true, branch: 'feature/design-new-api'}
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"description\":\"string\",\"name\":\"string\",\"timetable\":{\"per-hour\":0,\"hours-of-day\":[0],\"days-of-week\":[\"TUE\"],\"days-of-month\":[0],\"months\":[\"MAR\"]},\"attribution-actor\":\"current\",\"parameters\":{\"deploy_prod\":true,\"branch\":\"feature/design-new-api\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/api/v2/schedule/%7Bschedule-id%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/schedule/%7Bschedule-id%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"description\\\":\\\"string\\\"\
          ,\\\"name\\\":\\\"string\\\",\\\"timetable\\\":{\\\"per-hour\\\":0,\\\"\
          hours-of-day\\\":[0],\\\"days-of-week\\\":[\\\"TUE\\\"],\\\"days-of-month\\\
          \":[0],\\\"months\\\":[\\\"MAR\\\"]},\\\"attribution-actor\\\":\\\"current\\\
          \",\\\"parameters\\\":{\\\"deploy_prod\\\":true,\\\"branch\\\":\\\"feature/design-new-api\\\
          \"}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://circleci.com/api/v2/schedule/%7Bschedule-id%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"description":"string","name":"string","timetable":{"per-hour":0,"hours-of-day":[0],"days-of-week":["TUE"],"days-of-month":[0],"months":["MAR"]},"attribution-actor":"current","parameters":{"deploy_prod":true,"branch":"feature/design-new-api"}}'
  /user/{id}:
    get:
      tags:
      - User
      summary: User Information
      description: Provides information about the user with the given ID.
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: The unique ID of the user.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: User login information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/user/%7Bid%7D',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/user/%7Bid%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/user/%7Bid%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/user/%7Bid%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /webhook:
    get:
      tags:
      - Webhook
      summary: List webhooks
      description: Get a list of outbound webhooks that match the given scope-type
        and scope-id
      operationId: getWebhooks
      parameters:
      - name: scope-id
        in: query
        description: "ID of the scope being used (at the moment, only project ID is\
          \ supported)"
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: uuid
      - name: scope-type
        in: query
        description: Type of the scope being used
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - project
      responses:
        "200":
          description: A list of webhooks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_14"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/webhook',
            qs: {'scope-id': 'SOME_STRING_VALUE', 'scope-type': 'SOME_STRING_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/webhook?scope-id=SOME_STRING_VALUE&scope-type=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/webhook?scope-id=SOME_STRING_VALUE&scope-type=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/webhook?scope-id=SOME_STRING_VALUE&scope-type=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    post:
      tags:
      - Webhook
      summary: Create an outbound webhook
      description: Creates an outbound webhook.
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_body"
      responses:
        "201":
          description: A webhook
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/webhook',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              name: 'string',
              events: ['workflow-completed'],
              url: 'string',
              'verify-tls': true,
              'signing-secret': 'string',
              scope: {id: '497f6eca-6276-4993-bfeb-53cbbbba6f08', type: 'project'}
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"name\":\"string\",\"events\":[\"workflow-completed\"],\"url\":\"string\",\"verify-tls\":true,\"signing-secret\":\"string\",\"scope\":{\"id\":\"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\"type\":\"project\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/webhook", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/webhook\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"events\\\
          \":[\\\"workflow-completed\\\"],\\\"url\\\":\\\"string\\\",\\\"verify-tls\\\
          \":true,\\\"signing-secret\\\":\\\"string\\\",\\\"scope\\\":{\\\"id\\\"\
          :\\\"497f6eca-6276-4993-bfeb-53cbbbba6f08\\\",\\\"type\\\":\\\"project\\\
          \"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/webhook \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"name":"string","events":["workflow-completed"],"url":"string","verify-tls":true,"signing-secret":"string","scope":{"id":"497f6eca-6276-4993-bfeb-53cbbbba6f08","type":"project"}}'
  /webhook/{webhook-id}:
    get:
      tags:
      - Webhook
      summary: Get a webhook
      description: Get an outbound webhook by id.
      operationId: getWebhookById
      parameters:
      - name: webhook-id
        in: path
        description: ID of the webhook (UUID)
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: A webhook
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/webhook/%7Bwebhook-id%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    put:
      tags:
      - Webhook
      summary: Update an outbound webhook
      description: Updates an outbound webhook.
      operationId: updateWebhook
      parameters:
      - name: webhook-id
        in: path
        description: ID of the webhook (UUID)
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_webhookid_body"
      responses:
        "200":
          description: A webhook
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'PUT',
            url: 'https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              name: 'string',
              events: ['workflow-completed'],
              url: 'string',
              'signing-secret': 'string',
              'verify-tls': true
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"name\":\"string\",\"events\":[\"workflow-completed\"],\"url\":\"string\",\"signing-secret\":\"string\",\"verify-tls\":true}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PUT", "/api/v2/webhook/%7Bwebhook-id%7D", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"events\\\
          \":[\\\"workflow-completed\\\"],\\\"url\\\":\\\"string\\\",\\\"signing-secret\\\
          \":\\\"string\\\",\\\"verify-tls\\\":true}\")\n\n\treq, _ := http.NewRequest(\"\
          PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Shell + Curl
        source: |-
          curl --request PUT \
            --url https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"name":"string","events":["workflow-completed"],"url":"string","signing-secret":"string","verify-tls":true}'
    delete:
      tags:
      - Webhook
      summary: Delete an outbound webhook
      description: Deletes an outbound webhook
      operationId: deleteWebhook
      parameters:
      - name: webhook-id
        in: path
        description: ID of the webhook (UUID)
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: A confirmation message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'DELETE',
            url: 'https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/api/v2/webhook/%7Bwebhook-id%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /workflow/{id}:
    get:
      tags:
      - Workflow
      summary: Get a workflow
      description: Returns summary fields of a workflow by ID.
      operationId: getWorkflowById
      parameters:
      - name: id
        in: path
        description: The unique ID of the workflow.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
        example: 5034460f-c7c4-4c43-9457-de07e2029e7b
      responses:
        "200":
          description: A workflow object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
          links:
            ProjectFromGetWorkflow:
              operationId: getProjectBySlug
              parameters:
                project_slug: $response.body#/project_slug
            WorkflowJobs:
              operationId: listWorkflowJobs
              parameters:
                id: $response.body#/id
            CancelWorkflow:
              operationId: cancelWorkflow
              parameters:
                id: $response.body#/id
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /workflow/{id}/approve/{approval_request_id}:
    post:
      tags:
      - Workflow
      summary: Approve a job
      description: Approves a pending approval job in a workflow.
      operationId: approvePendingApprovalJobById
      parameters:
      - name: approval_request_id
        in: path
        description: The ID of the job being approved.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      - name: id
        in: path
        description: The unique ID of the workflow.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
        example: 5034460f-c7c4-4c43-9457-de07e2029e7b
      responses:
        "202":
          description: A confirmation message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/approve/%7Bapproval_request_id%7D',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/approve/%7Bapproval_request_id%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/approve/%7Bapproval_request_id%7D\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/approve/%7Bapproval_request_id%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /workflow/{id}/cancel:
    post:
      tags:
      - Workflow
      summary: Cancel a workflow
      description: Cancels a running workflow.
      operationId: cancelWorkflow
      parameters:
      - name: id
        in: path
        description: The unique ID of the workflow.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
        example: 5034460f-c7c4-4c43-9457-de07e2029e7b
      responses:
        "202":
          description: A confirmation message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/cancel',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/cancel", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/cancel\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/cancel \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /workflow/{id}/job:
    get:
      tags:
      - Workflow
      summary: Get a workflow's jobs
      description: Returns a sequence of jobs for a workflow.
      operationId: listWorkflowJobs
      parameters:
      - name: id
        in: path
        description: The unique ID of the workflow.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
        example: 5034460f-c7c4-4c43-9457-de07e2029e7b
      responses:
        "200":
          description: A paginated sequence of jobs.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowJobListResponse"
          links:
            NextWorkflowJobPage:
              operationId: listWorkflowJobs
              parameters:
                id: $request.path.id
                page-token: $response.body#/next_page_token
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/job',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/job", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/job\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/job \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /workflow/{id}/rerun:
    post:
      tags:
      - Workflow
      summary: Rerun a workflow
      description: Reruns a workflow.
      operationId: rerunWorkflow
      parameters:
      - name: id
        in: path
        description: The unique ID of the workflow.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
        example: 5034460f-c7c4-4c43-9457-de07e2029e7b
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RerunWorkflowParameters"
      responses:
        "202":
          description: A confirmation message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_202"
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/rerun',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              enable_ssh: false,
              from_failed: false,
              jobs: ['c65b68ef-e73b-4bf2-be9a-7a322a9df150', '5e957edd-5e8c-4985-9178-5d0d69561822'],
              sparse_tree: false
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"enable_ssh\":false,\"from_failed\":false,\"jobs\":[\"c65b68ef-e73b-4bf2-be9a-7a322a9df150\",\"5e957edd-5e8c-4985-9178-5d0d69561822\"],\"sparse_tree\":false}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/rerun", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/rerun\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"enable_ssh\\\":false,\\\"from_failed\\\
          \":false,\\\"jobs\\\":[\\\"c65b68ef-e73b-4bf2-be9a-7a322a9df150\\\",\\\"\
          5e957edd-5e8c-4985-9178-5d0d69561822\\\"],\\\"sparse_tree\\\":false}\")\n\
          \n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"\
          content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\"\
          , \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/workflow/5034460f-c7c4-4c43-9457-de07e2029e7b/rerun \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"enable_ssh":false,"from_failed":false,"jobs":["c65b68ef-e73b-4bf2-be9a-7a322a9df150","5e957edd-5e8c-4985-9178-5d0d69561822"],"sparse_tree":false}'
  /org/{orgID}/oidc-custom-claims:
    get:
      tags:
      - OIDC Token Management
      summary: Get org-level claims
      description: Fetches org-level custom claims of OIDC identity tokens
      operationId: GetOrgClaims
      parameters:
      - name: orgID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Claims successfully fetched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClaimResponse"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/org/%7BorgID%7D/oidc-custom-claims',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/org/%7BorgID%7D/oidc-custom-claims", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/org/%7BorgID%7D/oidc-custom-claims\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/org/%7BorgID%7D/oidc-custom-claims \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    delete:
      tags:
      - OIDC Token Management
      summary: Delete org-level claims
      description: Deletes org-level custom claims of OIDC identity tokens
      operationId: DeleteOrgClaims
      parameters:
      - name: orgID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      - name: claims
        in: query
        description: comma separated list of claims to delete. Valid values are "audience"
          and "ttl".
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Claims successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClaimResponse"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'DELETE',
            url: 'https://circleci.com/api/v2/org/%7BorgID%7D/oidc-custom-claims',
            qs: {claims: 'SOME_STRING_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/api/v2/org/%7BorgID%7D/oidc-custom-claims?claims=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/org/%7BorgID%7D/oidc-custom-claims?claims=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url 'https://circleci.com/api/v2/org/%7BorgID%7D/oidc-custom-claims?claims=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    patch:
      tags:
      - OIDC Token Management
      summary: Patch org-level claims
      description: Creates/Updates org-level custom claims of OIDC identity tokens
      operationId: PatchOrgClaims
      parameters:
      - name: orgID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchClaimsRequest"
      responses:
        "200":
          description: Claims successfully patched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClaimResponse"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'PATCH',
            url: 'https://circleci.com/api/v2/org/%7BorgID%7D/oidc-custom-claims',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {audience: ['string'], ttl: 'string'},
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"audience\":[\"string\"],\"ttl\":\"string\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/api/v2/org/%7BorgID%7D/oidc-custom-claims", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/org/%7BorgID%7D/oidc-custom-claims\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"audience\\\":[\\\"string\\\"],\\\
          \"ttl\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url,\
          \ payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\
          \treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\t\
          res, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://circleci.com/api/v2/org/%7BorgID%7D/oidc-custom-claims \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"audience":["string"],"ttl":"string"}'
  /org/{orgID}/project/{projectID}/oidc-custom-claims:
    get:
      tags:
      - OIDC Token Management
      summary: Get project-level claims
      description: Fetches project-level custom claims of OIDC identity tokens
      operationId: GetProjectClaims
      parameters:
      - name: orgID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      - name: projectID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Claims successfully fetched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClaimResponse"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    delete:
      tags:
      - OIDC Token Management
      summary: Delete project-level claims
      description: Deletes project-level custom claims of OIDC identity tokens
      operationId: DeleteProjectClaims
      parameters:
      - name: orgID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      - name: projectID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      - name: claims
        in: query
        description: comma separated list of claims to delete. Valid values are "audience"
          and "ttl".
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Claims successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClaimResponse"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'DELETE',
            url: 'https://circleci.com/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims',
            qs: {claims: 'SOME_STRING_VALUE'},
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims?claims=SOME_STRING_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims?claims=SOME_STRING_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url 'https://circleci.com/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims?claims=SOME_STRING_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    patch:
      tags:
      - OIDC Token Management
      summary: Patch project-level claims
      description: Creates/Updates project-level custom claims of OIDC identity tokens
      operationId: PatchProjectClaims
      parameters:
      - name: orgID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      - name: projectID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchClaimsRequest"
      responses:
        "200":
          description: Claims successfully patched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClaimResponse"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'PATCH',
            url: 'https://circleci.com/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {audience: ['string'], ttl: 'string'},
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"audience\":[\"string\"],\"ttl\":\"string\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"audience\\\":[\\\"string\\\"],\\\
          \"ttl\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url,\
          \ payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\
          \treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\t\
          res, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://circleci.com/api/v2/org/%7BorgID%7D/project/%7BprojectID%7D/oidc-custom-claims \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"audience":["string"],"ttl":"string"}'
  /owner/{ownerID}/context/{context}/decision:
    get:
      tags:
      - Policy Management
      summary: Retrieves the owner's decision audit logs.
      description: This endpoint will return a list of decision audit logs that were
        made using this owner's policies.
      operationId: GetDecisionLogs
      parameters:
      - name: ownerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: context
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: status
        in: query
        description: Return decisions matching this decision status.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: after
        in: query
        description: Return decisions made after this date.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: before
        in: query
        description: Return decisions made before this date.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: branch
        in: query
        description: Return decisions made on this branch.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: project_id
        in: query
        description: Return decisions made for this project.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: build_number
        in: query
        description: Return decisions made for this build number.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: offset
        in: query
        description: "Sets the offset when retrieving the decisions, for paging."
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Decision logs successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DecisionLog"
                x-content-type: application/json
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: |
            The request is unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_1"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision',
            qs: {
              status: 'SOME_STRING_VALUE',
              after: 'SOME_STRING_VALUE',
              before: 'SOME_STRING_VALUE',
              branch: 'SOME_STRING_VALUE',
              project_id: 'SOME_STRING_VALUE',
              build_number: 'SOME_STRING_VALUE',
              offset: 'SOME_INTEGER_VALUE'
            },
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision?status=SOME_STRING_VALUE&after=SOME_STRING_VALUE&before=SOME_STRING_VALUE&branch=SOME_STRING_VALUE&project_id=SOME_STRING_VALUE&build_number=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision?status=SOME_STRING_VALUE&after=SOME_STRING_VALUE&before=SOME_STRING_VALUE&branch=SOME_STRING_VALUE&project_id=SOME_STRING_VALUE&build_number=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url 'https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision?status=SOME_STRING_VALUE&after=SOME_STRING_VALUE&before=SOME_STRING_VALUE&branch=SOME_STRING_VALUE&project_id=SOME_STRING_VALUE&build_number=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    post:
      tags:
      - Policy Management
      summary: Makes a decision
      description: This endpoint will evaluate input data (config+metadata) against
        owner's stored policies and return a decision.
      operationId: MakeDecision
      parameters:
      - name: ownerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: context
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/context_decision_body"
      responses:
        "200":
          description: Decision rendered by applying the policy against the provided
            data. Response will be modeled by the data and rego processed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Decision"
        "400":
          description: |
            The request is malformed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400_1"
        "401":
          description: |
            The request is unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_1"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_2"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {input: 'string', metadata: {}},
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"input\":\"string\",\"metadata\":{}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"input\\\":\\\"string\\\",\\\"\
          metadata\\\":{}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\
          \n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"input":"string","metadata":{}}'
  /owner/{ownerID}/context/{context}/decision/settings:
    get:
      tags:
      - Policy Management
      summary: Get the decision settings
      description: This endpoint retrieves the current decision settings (eg enable/disable
        policy evaluation)
      operationId: GetDecisionSettings
      parameters:
      - name: ownerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: context
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Decision settings successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionSettings"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: |
            The request is unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_1"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/settings',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/settings", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/settings\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/settings \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    patch:
      tags:
      - Policy Management
      summary: Set the decision settings
      description: This endpoint allows modifying decision settings (eg enable/disable
        policy evaluation)
      operationId: SetDecisionSettings
      parameters:
      - name: ownerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: context
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DecisionSettings"
      responses:
        "200":
          description: Decision settings successfully set.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionSettings"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: |
            The request is unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_1"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'PATCH',
            url: 'https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/settings',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {enabled: true},
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"enabled\":true}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/settings", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/settings\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"enabled\\\":true}\")\n\n\treq,\
          \ _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/settings \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"enabled":true}'
  /owner/{ownerID}/context/{context}/decision/{decisionID}:
    get:
      tags:
      - Policy Management
      summary: Retrieves the owner's decision audit log by given decisionID
      description: This endpoint will retrieve a decision for a given decision log
        ID
      operationId: GetDecisionLog
      parameters:
      - name: ownerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: context
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: decisionID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Decision log successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionLog"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: |
            The request is unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "404":
          description: |
            There was no decision log found for given decision_id, and owner_id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_404"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_1"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/%7BdecisionID%7D',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/%7BdecisionID%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/%7BdecisionID%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/%7BdecisionID%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /owner/{ownerID}/context/{context}/decision/{decisionID}/policy-bundle:
    get:
      tags:
      - Policy Management
      summary: Retrieves Policy Bundle for a given decision log ID
      description: This endpoint will retrieve a policy bundle for a given decision
        log ID
      operationId: GetDecisionLogPolicyBundle
      parameters:
      - name: ownerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: context
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: decisionID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Policy-Bundle retrieved successfully for given decision log
            ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyBundle"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: |
            The request is unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "404":
          description: |
            There was no decision log found for given decision_id, and owner_id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_404"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_1"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/%7BdecisionID%7D/policy-bundle',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/%7BdecisionID%7D/policy-bundle", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/%7BdecisionID%7D/policy-bundle\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/decision/%7BdecisionID%7D/policy-bundle \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /owner/{ownerID}/context/{context}/policy-bundle:
    get:
      tags:
      - Policy Management
      summary: Retrieves Policy Bundle
      description: This endpoint will retrieve a policy bundle
      operationId: GetPolicyBundle
      parameters:
      - name: ownerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: context
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Policy-Bundle retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyBundle"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: |
            The request is unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_1"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    post:
      tags:
      - Policy Management
      summary: Creates policy bundle for the context
      description: This endpoint replaces the current policy bundle with the provided
        policy bundle
      operationId: CreatePolicyBundle
      parameters:
      - name: ownerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: context
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: dry
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BundlePayload"
      responses:
        "200":
          description: Policy-Bundle diff successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BundleDiff"
        "201":
          description: Policy-Bundle successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BundleDiff"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: |
            The request is unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "413":
          description: |
            The request exceeds the maximum payload size for policy bundles ~2.5Mib
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_413"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_1"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle',
            qs: {dry: 'SOME_BOOLEAN_VALUE'},
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {policies: {property1: 'string', property2: 'string'}},
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"policies\":{\"property1\":\"string\",\"property2\":\"string\"}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle?dry=SOME_BOOLEAN_VALUE", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle?dry=SOME_BOOLEAN_VALUE\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"policies\\\":{\\\"property1\\\"\
          :\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url 'https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle?dry=SOME_BOOLEAN_VALUE' \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"policies":{"property1":"string","property2":"string"}}'
  /owner/{ownerID}/context/{context}/policy-bundle/{policyName}:
    get:
      tags:
      - Policy Management
      summary: Retrieves a policy document
      description: This endpoint will retrieve a policy document.
      operationId: GetPolicyDocument
      parameters:
      - name: ownerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: context
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: policyName
        in: path
        description: the policy name set by the rego policy_name rule
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Policy retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        "400":
          description: |
            The request is malformed (e.g, a given path parameter is invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400"
        "401":
          description: |
            The request is unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401"
        "403":
          description: |
            The user is forbidden from making this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403"
        "404":
          description: |
            There was no policy that was found with the given owner_id and policy name.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_404_1"
        "500":
          description: Something unexpected happened on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_1"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle/%7BpolicyName%7D',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle/%7BpolicyName%7D", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle/%7BpolicyName%7D\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/owner/%7BownerID%7D/context/%7Bcontext%7D/policy-bundle/%7BpolicyName%7D \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /context/{context_id}/restrictions:
    get:
      tags:
      - Context
      summary: 🧪 Get context restrictions
      description: "[__EXPERIMENTAL__] Gets a list of project restrictions associated\
        \ with a context."
      operationId: getContextRestrictions
      parameters:
      - name: context_id
        in: path
        description: An opaque identifier of a context.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: be8bb2e3-c3d6-4098-89f4-572ff976ba9a
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/context_project_restrictions_list"
        "400":
          description: Context ID provided is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400_2"
        "401":
          description: Credentials provided are invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                invalid_token:
                  summary: Token is invalid.
                  value:
                    message: Invalid token provided.
                old_token:
                  summary: Token was generated before 2023-06-23.
                  value:
                    message: New format tokens are needed to authenticate this API
                      endpoint. Create a new API token for access.
                query_auth:
                  summary: Authentication attempted via query parameters.
                  value:
                    message: "Support for query parameter authentication has been\
                      \ deprecated to improve security. Please use a supported authentication\
                      \ method such as header-based, or basic authentication."
        "404":
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                context_not_found:
                  summary: Context not found.
                  value:
                    message: Context not found.
                org_not_found:
                  summary: Organization not found.
                  value:
                    message: Organization does not exist.
                user_not_found:
                  summary: User not found.
                  value:
                    message: User does not exist.
                project_not_found:
                  summary: Project not found.
                  value:
                    message: Project does not exist.
                group_not_found:
                  summary: Group not found.
                  value:
                    message: Group does not exist.
                orb_not_found:
                  summary: Orb not found.
                  value:
                    message: Orb does not exist.
        "429":
          description: API rate limits exceeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_429"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_3"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    post:
      tags:
      - Context
      summary: 🧪 Create context restriction
      description: "[__EXPERIMENTAL__] Creates project restriction on a context."
      operationId: createContextRestriction
      parameters:
      - name: context_id
        in: path
        description: An opaque identifier of a context.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: be8bb2e3-c3d6-4098-89f4-572ff976ba9a
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/context_id_restrictions_body"
            example:
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              restriction_type: project
              restriction_value: 405d8375-3514-403b-8c43-83ae74cfe0e9
        required: true
      responses:
        "201":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/restriction_created"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                invalid_restriction:
                  summary: Invalid restriction
                  value:
                    message: This restriction cannot be applied to this context.
                invalid_access:
                  summary: "Project doesn't exist, or insufficient credentials"
                  value:
                    message: "Project does not exist, or user does not have access\
                      \ to this project."
        "401":
          description: Credentials provided are invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                invalid_token:
                  summary: Token is invalid.
                  value:
                    message: Invalid token provided.
                old_token:
                  summary: Token was generated before 2023-06-23.
                  value:
                    message: New format tokens are needed to authenticate this API
                      endpoint. Create a new API token for access.
                query_auth:
                  summary: Authentication attempted via query parameters.
                  value:
                    message: "Support for query parameter authentication has been\
                      \ deprecated to improve security. Please use a supported authentication\
                      \ method such as header-based, or basic authentication."
        "404":
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                context_not_found:
                  summary: Context not found.
                  value:
                    message: Context not found.
                org_not_found:
                  summary: Organization not found.
                  value:
                    message: Organization does not exist.
                user_not_found:
                  summary: User not found.
                  value:
                    message: User does not exist.
                project_not_found:
                  summary: Project not found.
                  value:
                    message: Project does not exist.
                group_not_found:
                  summary: Group not found.
                  value:
                    message: Group does not exist.
                orb_not_found:
                  summary: Orb not found.
                  value:
                    message: Orb does not exist.
        "409":
          description: Request conflict.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                restriction_conflict:
                  summary: Restriction conflict
                  value:
                    message: The restriction you're trying to add already exists.
        "429":
          description: API rate limits exceeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_429"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_3"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              project_id: '405d8375-3514-403b-8c43-83ae74cfe0e9',
              restriction_type: 'string',
              restriction_value: 'string'
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"project_id\":\"405d8375-3514-403b-8c43-83ae74cfe0e9\",\"restriction_type\":\"string\",\"restriction_value\":\"string\"}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"project_id\\\":\\\"405d8375-3514-403b-8c43-83ae74cfe0e9\\\
          \",\\\"restriction_type\\\":\\\"string\\\",\\\"restriction_value\\\":\\\"\
          string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\
          \treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"project_id":"405d8375-3514-403b-8c43-83ae74cfe0e9","restriction_type":"string","restriction_value":"string"}'
  /context/{context_id}/restrictions/{restriction_id}:
    delete:
      tags:
      - Context
      summary: 🧪 Delete context restriction
      description: "[__EXPERIMENTAL__] Deletes a project restriction on a context."
      operationId: deleteContextRestriction
      parameters:
      - name: context_id
        in: path
        description: An opaque identifier of a context.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: be8bb2e3-c3d6-4098-89f4-572ff976ba9a
      - name: restriction_id
        in: path
        description: An opaque identifier of a context restriction.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1c23d2cb-07b1-4a28-8af3-e369732050ed
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/restriction_deleted"
              examples:
                successful_delete:
                  summary: Successful deletion of restriction
                  value:
                    message: Context restriction deleted.
        "400":
          description: Context restriction ID provided is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400_3"
        "401":
          description: Credentials provided are invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                invalid_token:
                  summary: Token is invalid.
                  value:
                    message: Invalid token provided.
                old_token:
                  summary: Token was generated before 2023-06-23.
                  value:
                    message: New format tokens are needed to authenticate this API
                      endpoint. Create a new API token for access.
                query_auth:
                  summary: Authentication attempted via query parameters.
                  value:
                    message: "Support for query parameter authentication has been\
                      \ deprecated to improve security. Please use a supported authentication\
                      \ method such as header-based, or basic authentication."
        "404":
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                context_not_found:
                  summary: Context not found.
                  value:
                    message: Context not found.
                org_not_found:
                  summary: Organization not found.
                  value:
                    message: Organization does not exist.
                user_not_found:
                  summary: User not found.
                  value:
                    message: User does not exist.
                project_not_found:
                  summary: Project not found.
                  value:
                    message: Project does not exist.
                group_not_found:
                  summary: Group not found.
                  value:
                    message: Group does not exist.
                orb_not_found:
                  summary: Orb not found.
                  value:
                    message: Orb does not exist.
        "429":
          description: API rate limits exceeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_429"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_3"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'DELETE',
            url: 'https://circleci.com/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions/1c23d2cb-07b1-4a28-8af3-e369732050ed',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("DELETE", "/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions/1c23d2cb-07b1-4a28-8af3-e369732050ed", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions/1c23d2cb-07b1-4a28-8af3-e369732050ed\"\
          \n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request DELETE \
            --url https://circleci.com/api/v2/context/be8bb2e3-c3d6-4098-89f4-572ff976ba9a/restrictions/1c23d2cb-07b1-4a28-8af3-e369732050ed \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{provider}/{organization}/{project}:
    post:
      tags:
      - Project
      summary: 🧪 Create a project
      description: "[__EXPERIMENTAL__]  Creates a new CircleCI project, and returns\
        \ a list of the default advanced settings. Can only be called on a repo with\
        \ a main branch and an existing config.yml file. Not yet available to projects\
        \ that use GitLab or GitHub App."
      operationId: createProject
      parameters:
      - name: provider
        in: path
        description: "The `provider` segment of a project or org slug, the first of\
          \ the three. This may be a VCS. For projects that use GitLab or GitHub App,\
          \ use `circleci`."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: gh
      - name: organization
        in: path
        description: "The `organization` segment of a project or org slug, the second\
          \ of the three. For GitHub OAuth or Bitbucket projects, this is the organization\
          \ name. For projects that use GitLab or GitHub App, use the organization\
          \ ID (found in Organization Settings)."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: CircleCI-Public
      - name: project
        in: path
        description: "The `project` segment of a project slug, the third of the three.\
          \ For GitHub OAuth or Bitbucket projects, this is the repository name. For\
          \ projects that use GitLab or GitHub App, use the project ID (found in Project\
          \ Settings)."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: api-preview-docs
      responses:
        "201":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project_settings"
        "400":
          description: Unexpected request body provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400_4"
        "401":
          description: Credentials provided are invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                invalid_token:
                  summary: Token is invalid.
                  value:
                    message: Invalid token provided.
                old_token:
                  summary: Token was generated before 2023-06-23.
                  value:
                    message: New format tokens are needed to authenticate this API
                      endpoint. Create a new API token for access.
                query_auth:
                  summary: Authentication attempted via query parameters.
                  value:
                    message: "Support for query parameter authentication has been\
                      \ deprecated to improve security. Please use a supported authentication\
                      \ method such as header-based, or basic authentication."
        "403":
          description: None or insufficient credentials provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403_1"
        "404":
          description: Either a branch or a project were not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                branch_not_found:
                  summary: "Branch not found, unable to trigger pipeline."
                  value:
                    message: Branch not found.
                project_not_found:
                  summary: "Project not found, e.g. GitHub repo."
                  value:
                    message: Project not found.
        "405":
          description: Create projects using the API is currently supported for classic
            Github OAuth and Bitbucket projects only.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_405"
        "429":
          description: API rate limits exceeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_429"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_3"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("POST", "/api/v2/project/gh/CircleCI-Public/api-preview-docs", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs\"\
          \n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{provider}/{organization}/{project}/settings:
    get:
      tags:
      - Project
      summary: 🧪 Get project settings
      description: "[__EXPERIMENTAL__] Returns a list of the advanced settings for\
        \ a CircleCI project, whether enabled (true) or not (false)."
      operationId: getProjectSettings
      parameters:
      - name: provider
        in: path
        description: "The `provider` segment of a project or org slug, the first of\
          \ the three. This may be a VCS. For projects that use GitLab or GitHub App,\
          \ use `circleci`."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: gh
      - name: organization
        in: path
        description: "The `organization` segment of a project or org slug, the second\
          \ of the three. For GitHub OAuth or Bitbucket projects, this is the organization\
          \ name. For projects that use GitLab or GitHub App, use the organization\
          \ ID (found in Organization Settings)."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: CircleCI-Public
      - name: project
        in: path
        description: "The `project` segment of a project slug, the third of the three.\
          \ For GitHub OAuth or Bitbucket projects, this is the repository name. For\
          \ projects that use GitLab or GitHub App, use the project ID (found in Project\
          \ Settings)."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: api-preview-docs
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project_settings"
        "401":
          description: Credentials provided are invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                invalid_token:
                  summary: Token is invalid.
                  value:
                    message: Invalid token provided.
                old_token:
                  summary: Token was generated before 2023-06-23.
                  value:
                    message: New format tokens are needed to authenticate this API
                      endpoint. Create a new API token for access.
                query_auth:
                  summary: Authentication attempted via query parameters.
                  value:
                    message: "Support for query parameter authentication has been\
                      \ deprecated to improve security. Please use a supported authentication\
                      \ method such as header-based, or basic authentication."
        "403":
          description: None or insufficient credentials provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403_1"
        "404":
          description: "Insufficient credentials for a private project, OR the organization,\
            \ project, or repository does not exist."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_404_2"
        "429":
          description: API rate limits exceeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_429"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_3"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/settings',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/settings", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/settings\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/settings \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
    patch:
      tags:
      - Project
      summary: 🧪 Update project settings
      description: "[__EXPERIMENTAL__] Updates one or more of the advanced settings\
        \ for a CircleCI project."
      operationId: patchProjectSettings
      parameters:
      - name: provider
        in: path
        description: "The `provider` segment of a project or org slug, the first of\
          \ the three. This may be a VCS. For projects that use GitLab or GitHub App,\
          \ use `circleci`."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: gh
      - name: organization
        in: path
        description: "The `organization` segment of a project or org slug, the second\
          \ of the three. For GitHub OAuth or Bitbucket projects, this is the organization\
          \ name. For projects that use GitLab or GitHub App, use the organization\
          \ ID (found in Organization Settings)."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: CircleCI-Public
      - name: project
        in: path
        description: "The `project` segment of a project slug, the third of the three.\
          \ For GitHub OAuth or Bitbucket projects, this is the repository name. For\
          \ projects that use GitLab or GitHub App, use the project ID (found in Project\
          \ Settings)."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: api-preview-docs
      requestBody:
        description: "The setting(s) to update, including one or more fields in the\
          \ JSON object. Note that `oss: true` will only be set on projects whose\
          \ underlying repositories are actually open source."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/project_settings"
            example:
              advanced:
                autocancel_builds: false
                build_prs_only: true
                pr_only_branch_overrides:
                - main
        required: true
      responses:
        "200":
          description: "Successful response. Always includes the full advanced settings\
            \ object. Returned even when the provided updates match the existing settings,\
            \ but can also be returned when `oss: true` fails to set."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project_settings"
        "400":
          description: "Request is malformed, e.g. with improperly encoded JSON"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                invalid_json:
                  summary: Invalid JSON body
                  value:
                    message: Invalid JSON body.
                too_many_branch_overrides:
                  summary: More than 100 branches sent for `pr_only_branch_overrides`
                  value:
                    message: Field 'pr_only_branch_overrides' only supports up to
                      100 branches.
                no_json:
                  summary: Empty JSON request body
                  value:
                    message: No JSON fields found.
                unexpected_field:
                  summary: Incorrect root field name
                  value:
                    message: Unexpected JSON field 'incorrect'
                unknown_setting:
                  summary: Incorrect setting name
                  value:
                    message: Unknown advanced setting 'incorrect'.
                incorrect_type:
                  summary: Incorrect setting type
                  value:
                    message: Setting 'autocancel_builds' must be boolean.
                oss:
                  summary: Incorrect OSS value for project
                  value:
                    message: Feature flag 'oss' is not settable for this project.
        "401":
          description: Credentials provided are invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                invalid_token:
                  summary: Token is invalid.
                  value:
                    message: Invalid token provided.
                old_token:
                  summary: Token was generated before 2023-06-23.
                  value:
                    message: New format tokens are needed to authenticate this API
                      endpoint. Create a new API token for access.
                query_auth:
                  summary: Authentication attempted via query parameters.
                  value:
                    message: "Support for query parameter authentication has been\
                      \ deprecated to improve security. Please use a supported authentication\
                      \ method such as header-based, or basic authentication."
        "403":
          description: None or insufficient credentials provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_403_1"
        "404":
          description: "Insufficient credentials for a private project, OR the organization,\
            \ project, or repository does not exist."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_404_2"
        "429":
          description: API rate limits exceeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_429"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_3"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'PATCH',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/settings',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              advanced: {
                autocancel_builds: true,
                build_fork_prs: true,
                build_prs_only: true,
                disable_ssh: true,
                forks_receive_secret_env_vars: true,
                oss: true,
                set_github_status: true,
                setup_workflows: true,
                write_settings_requires_admin: true,
                pr_only_branch_overrides: ['string']
              }
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"advanced\":{\"autocancel_builds\":true,\"build_fork_prs\":true,\"build_prs_only\":true,\"disable_ssh\":true,\"forks_receive_secret_env_vars\":true,\"oss\":true,\"set_github_status\":true,\"setup_workflows\":true,\"write_settings_requires_admin\":true,\"pr_only_branch_overrides\":[\"string\"]}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("PATCH", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/settings", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/settings\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"advanced\\\":{\\\"autocancel_builds\\\
          \":true,\\\"build_fork_prs\\\":true,\\\"build_prs_only\\\":true,\\\"disable_ssh\\\
          \":true,\\\"forks_receive_secret_env_vars\\\":true,\\\"oss\\\":true,\\\"\
          set_github_status\\\":true,\\\"setup_workflows\\\":true,\\\"write_settings_requires_admin\\\
          \":true,\\\"pr_only_branch_overrides\\\":[\\\"string\\\"]}}\")\n\n\treq,\
          \ _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Shell + Curl
        source: |-
          curl --request PATCH \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/settings \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"advanced":{"autocancel_builds":true,"build_fork_prs":true,"build_prs_only":true,"disable_ssh":true,"forks_receive_secret_env_vars":true,"oss":true,"set_github_status":true,"setup_workflows":true,"write_settings_requires_admin":true,"pr_only_branch_overrides":["string"]}}'
  /organizations/{org_id}/usage_export_job:
    post:
      tags:
      - Usage
      summary: Create a usage export
      description: Submits a request to create a usage export for an organization.
      operationId: createUsageExport
      parameters:
      - name: org_id
        in: path
        description: An opaque identifier of an organization.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: b9291e0d-a11e-41fb-8517-c545388b5953
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/org_id_usage_export_job_body"
        required: true
      responses:
        "201":
          description: Usage export created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/usage_export_job"
        "400":
          description: Unexpected request body provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400_4"
        "401":
          description: Credentials provided are invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                invalid_token:
                  summary: Token is invalid.
                  value:
                    message: Invalid token provided.
                old_token:
                  summary: Token was generated before 2023-06-23.
                  value:
                    message: New format tokens are needed to authenticate this API
                      endpoint. Create a new API token for access.
                query_auth:
                  summary: Authentication attempted via query parameters.
                  value:
                    message: "Support for query parameter authentication has been\
                      \ deprecated to improve security. Please use a supported authentication\
                      \ method such as header-based, or basic authentication."
        "404":
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                context_not_found:
                  summary: Context not found.
                  value:
                    message: Context not found.
                org_not_found:
                  summary: Organization not found.
                  value:
                    message: Organization does not exist.
                user_not_found:
                  summary: User not found.
                  value:
                    message: User does not exist.
                project_not_found:
                  summary: Project not found.
                  value:
                    message: Project does not exist.
                group_not_found:
                  summary: Group not found.
                  value:
                    message: Group does not exist.
                orb_not_found:
                  summary: Orb not found.
                  value:
                    message: Orb does not exist.
        "429":
          description: API rate limits exceeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_429"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_3"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/organizations/b9291e0d-a11e-41fb-8517-c545388b5953/usage_export_job',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              start: '2019-08-24T14:15:22Z',
              end: '2019-08-24T14:15:22Z',
              shared_org_ids: ['497f6eca-6276-4993-bfeb-53cbbbba6f08']
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"start\":\"2019-08-24T14:15:22Z\",\"end\":\"2019-08-24T14:15:22Z\",\"shared_org_ids\":[\"497f6eca-6276-4993-bfeb-53cbbbba6f08\"]}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/organizations/b9291e0d-a11e-41fb-8517-c545388b5953/usage_export_job", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/organizations/b9291e0d-a11e-41fb-8517-c545388b5953/usage_export_job\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"start\\\":\\\"2019-08-24T14:15:22Z\\\
          \",\\\"end\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"shared_org_ids\\\":[\\\"\
          497f6eca-6276-4993-bfeb-53cbbbba6f08\\\"]}\")\n\n\treq, _ := http.NewRequest(\"\
          POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\"\
          )\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\
          \tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody,\
          \ _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/organizations/b9291e0d-a11e-41fb-8517-c545388b5953/usage_export_job \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"start":"2019-08-24T14:15:22Z","end":"2019-08-24T14:15:22Z","shared_org_ids":["497f6eca-6276-4993-bfeb-53cbbbba6f08"]}'
  /organizations/{org_id}/usage_export_job/{usage_export_job_id}:
    get:
      tags:
      - Usage
      summary: Get a usage export
      description: Gets a usage export for an organization.
      operationId: getUsageExport
      parameters:
      - name: org_id
        in: path
        description: An opaque identifier of an organization.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: b9291e0d-a11e-41fb-8517-c545388b5953
      - name: usage_export_job_id
        in: path
        description: An opaque identifier of a usage export job.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
        example: e8235eed-f121-4ae3-9c72-2719d6572818
      responses:
        "200":
          description: Usage export fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get_usage_export_job_status"
        "400":
          description: Unexpected request body provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400_4"
        "401":
          description: Credentials provided are invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                invalid_token:
                  summary: Token is invalid.
                  value:
                    message: Invalid token provided.
                old_token:
                  summary: Token was generated before 2023-06-23.
                  value:
                    message: New format tokens are needed to authenticate this API
                      endpoint. Create a new API token for access.
                query_auth:
                  summary: Authentication attempted via query parameters.
                  value:
                    message: "Support for query parameter authentication has been\
                      \ deprecated to improve security. Please use a supported authentication\
                      \ method such as header-based, or basic authentication."
        "404":
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                context_not_found:
                  summary: Context not found.
                  value:
                    message: Context not found.
                org_not_found:
                  summary: Organization not found.
                  value:
                    message: Organization does not exist.
                user_not_found:
                  summary: User not found.
                  value:
                    message: User does not exist.
                project_not_found:
                  summary: Project not found.
                  value:
                    message: Project does not exist.
                group_not_found:
                  summary: Group not found.
                  value:
                    message: Group does not exist.
                orb_not_found:
                  summary: Orb not found.
                  value:
                    message: Orb does not exist.
        "429":
          description: API rate limits exceeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_429"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_500_3"
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'GET',
            url: 'https://circleci.com/api/v2/organizations/b9291e0d-a11e-41fb-8517-c545388b5953/usage_export_job/e8235eed-f121-4ae3-9c72-2719d6572818',
            headers: {Authorization: 'Basic REPLACE_BASIC_AUTH'}
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

          conn.request("GET", "/api/v2/organizations/b9291e0d-a11e-41fb-8517-c545388b5953/usage_export_job/e8235eed-f121-4ae3-9c72-2719d6572818", headers=headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\
          \n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/organizations/b9291e0d-a11e-41fb-8517-c545388b5953/usage_export_job/e8235eed-f121-4ae3-9c72-2719d6572818\"\
          \n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"\
          Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\
          \n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\t\
          fmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
      - lang: Shell + Curl
        source: |-
          curl --request GET \
            --url https://circleci.com/api/v2/organizations/b9291e0d-a11e-41fb-8517-c545388b5953/usage_export_job/e8235eed-f121-4ae3-9c72-2719d6572818 \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH'
  /project/{provider}/{organization}/{project}/pipeline/run:
    post:
      tags:
      - Pipeline
      summary: "[Recommended] Trigger a new pipeline"
      description: Trigger a pipeline given a pipeline definition ID. Supports all
        integrations except GitLab.
      operationId: triggerPipelineRun
      parameters:
      - name: provider
        in: path
        description: "The `provider` segment of a project or org slug, the first of\
          \ the three. This may be a VCS. For projects that use GitHub App, use `circleci`."
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - github
          - gh
          - bitbucket
          - bb
          - circleci
        example: gh
      - name: organization
        in: path
        description: "The `organization` segment of a project or org slug, the second\
          \ of the three. For GitHub OAuth or Bitbucket projects, this is the organization\
          \ name. For projects that use GitLab or GitHub App, use the organization\
          \ ID (found in Organization Settings)."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: CircleCI-Public
      - name: project
        in: path
        description: "The `project` segment of a project slug, the third of the three.\
          \ For GitHub OAuth or Bitbucket projects, this is the repository name. For\
          \ projects that use GitLab or GitHub App, use the project ID (found in Project\
          \ Settings)."
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: api-preview-docs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pipelineRequest"
      responses:
        "201":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pipeline"
        "400":
          description: Unexpected request body provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_400_4"
        "401":
          description: Credentials provided are invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                invalid_token:
                  summary: Token is invalid.
                  value:
                    message: Invalid token provided.
                old_token:
                  summary: Token was generated before 2023-06-23.
                  value:
                    message: New format tokens are needed to authenticate this API
                      endpoint. Create a new API token for access.
                query_auth:
                  summary: Authentication attempted via query parameters.
                  value:
                    message: "Support for query parameter authentication has been\
                      \ deprecated to improve security. Please use a supported authentication\
                      \ method such as header-based, or basic authentication."
        "404":
          description: Entity not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_401_2"
              examples:
                context_not_found:
                  summary: Context not found.
                  value:
                    message: Context not found.
                org_not_found:
                  summary: Organization not found.
                  value:
                    message: Organization does not exist.
                user_not_found:
                  summary: User not found.
                  value:
                    message: User does not exist.
                project_not_found:
                  summary: Project not found.
                  value:
                    message: Project does not exist.
                group_not_found:
                  summary: Group not found.
                  value:
                    message: Group does not exist.
                orb_not_found:
                  summary: Orb not found.
                  value:
                    message: Orb does not exist.
      x-codeSamples:
      - lang: Node + Request
        source: |
          const request = require('request');

          const options = {
            method: 'POST',
            url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/run',
            headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},
            body: {
              definition_id: '2338d0ae-5541-4bbf-88a2-55e9f7281f80',
              config: {branch: 'main'},
              checkout: {tag: 'v2'},
              parameters: {example_param: 'my value', example_param2: true, example_param3: 3}
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) throw new Error(error);

            console.log(body);
          });
      - lang: Python + Python3
        source: |-
          import http.client

          conn = http.client.HTTPSConnection("circleci.com")

          payload = "{\"definition_id\":\"2338d0ae-5541-4bbf-88a2-55e9f7281f80\",\"config\":{\"branch\":\"main\"},\"checkout\":{\"tag\":\"v2\"},\"parameters\":{\"example_param\":\"my value\",\"example_param2\":true,\"example_param3\":3}}"

          headers = {
              'content-type': "application/json",
              'Authorization': "Basic REPLACE_BASIC_AUTH"
              }

          conn.request("POST", "/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/run", payload, headers)

          res = conn.getresponse()
          data = res.read()

          print(data.decode("utf-8"))
      - lang: Go + Native
        source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\
          \n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/run\"\
          \n\n\tpayload := strings.NewReader(\"{\\\"definition_id\\\":\\\"2338d0ae-5541-4bbf-88a2-55e9f7281f80\\\
          \",\\\"config\\\":{\\\"branch\\\":\\\"main\\\"},\\\"checkout\\\":{\\\"tag\\\
          \":\\\"v2\\\"},\\\"parameters\\\":{\\\"example_param\\\":\\\"my value\\\"\
          ,\\\"example_param2\\\":true,\\\"example_param3\\\":3}}\")\n\n\treq, _ :=\
          \ http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\"\
          , \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\"\
          )\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\
          \tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\
          \n}"
      - lang: Shell + Curl
        source: |-
          curl --request POST \
            --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/pipeline/run \
            --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
            --header 'content-type: application/json' \
            --data '{"definition_id":"2338d0ae-5541-4bbf-88a2-55e9f7281f80","config":{"branch":"main"},"checkout":{"tag":"v2"},"parameters":{"example_param":"my value","example_param2":true,"example_param3":3}}'
components:
  schemas:
    ClaimResponse:
      required:
      - org_id
      type: object
      properties:
        audience:
          type: array
          items:
            type: string
        audience_updated_at:
          type: string
          format: date-time
        org_id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        ttl:
          $ref: "#/components/schemas/JSONDuration"
        ttl_updated_at:
          type: string
          format: date-time
      example:
        audience:
        - audience
        - audience
        project_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        org_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        audience_updated_at: 2000-01-23T04:56:07.000+00:00
        ttl_updated_at: 2000-01-23T04:56:07.000+00:00
        ttl: ttl
    JSONDuration:
      pattern: "^([0-9]+(ms|s|m|h|d|w)){1,7}$"
      type: string
    PatchClaimsRequest:
      type: object
      properties:
        audience:
          type: array
          items:
            type: string
        ttl:
          $ref: "#/components/schemas/JSONDuration"
    BundleDiff:
      type: object
      properties:
        created:
          type: array
          items:
            type: string
            description: policy names
        deleted:
          type: array
          items:
            type: string
            description: policy names
        modified:
          type: array
          items:
            type: string
            description: policy names
      example:
        deleted:
        - deleted
        - deleted
        created:
        - created
        - created
        modified:
        - modified
        - modified
    BundlePayload:
      type: object
      properties:
        policies:
          type: object
          additionalProperties:
            type: string
            description: policy content
    Decision:
      required:
      - status
      type: object
      properties:
        enabled_rules:
          type: array
          items:
            type: string
        hard_failures:
          type: array
          items:
            $ref: "#/components/schemas/Violation"
        reason:
          type: string
        soft_failures:
          type: array
          items:
            $ref: "#/components/schemas/Violation"
        status:
          type: string
      example:
        reason: reason
        enabled_rules:
        - enabled_rules
        - enabled_rules
        soft_failures:
        - null
        - null
        hard_failures:
        - reason: reason
          rule: rule
        - reason: reason
          rule: rule
        status: status
    DecisionLog:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        decision:
          $ref: "#/components/schemas/Decision"
        id:
          type: string
          format: uuid
        metadata:
          $ref: "#/components/schemas/DecisionLog_metadata"
        policies:
          type: object
          additionalProperties:
            maxLength: 128
            minLength: 128
            type: string
          description: policy-name-to-hash-map
          example:
            policy_name1: 1f40fc92da241694750979ee6cf582f2d5d7d28e18335de05abc54d0560e0f5302860c652bf08d560252aa5e74210546f369fbbbce8c12cfc7957b2652fe9a75
            policy_name2: 5267768822ee624d48fce15ec5ca79cbd602cb7f4c2157a516556991f22ef8c7b5ef7b18d1ff41c59370efb0858651d44a936c11b7b144c48fe04df3c6a3e8da
        time_taken_ms:
          type: integer
      example:
        metadata:
          project_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          vcs:
            target_repository_url: target_repository_url
            branch: branch
            origin_repository_url: origin_repository_url
            release_tag: release_tag
          build_number: 0
          ssh_rerun: true
        decision:
          reason: reason
          enabled_rules:
          - enabled_rules
          - enabled_rules
          soft_failures:
          - null
          - null
          hard_failures:
          - reason: reason
            rule: rule
          - reason: reason
            rule: rule
          status: status
        policies:
          policy_name1: 1f40fc92da241694750979ee6cf582f2d5d7d28e18335de05abc54d0560e0f5302860c652bf08d560252aa5e74210546f369fbbbce8c12cfc7957b2652fe9a75
          policy_name2: 5267768822ee624d48fce15ec5ca79cbd602cb7f4c2157a516556991f22ef8c7b5ef7b18d1ff41c59370efb0858651d44a936c11b7b144c48fe04df3c6a3e8da
        time_taken_ms: 6
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    DecisionSettings:
      type: object
      properties:
        enabled:
          type: boolean
      example:
        enabled: true
    Policy:
      type: object
      properties:
        content:
          type: string
        created_at:
          type: string
          format: date-time
        created_by:
          type: string
        name:
          type: string
      example:
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        created_by: created_by
        content: content
    PolicyBundle:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/Policy"
      x-schema-name: PolicyBundle
    Violation:
      required:
      - reason
      - rule
      type: object
      properties:
        reason:
          type: string
        rule:
          type: string
      example:
        reason: reason
        rule: rule
    context_project_restrictions_list:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/context_project_restrictions_list_items"
        next_page_token:
          type: string
          description: Token that can be used to retrieve next page of results
          nullable: true
      additionalProperties: false
      example:
        next_page_token: next_page_token
        items:
        - restriction_type: project
          project_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          restriction_value: restriction_value
          name: name
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - restriction_type: project
          project_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          restriction_value: restriction_value
          name: name
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    project_settings:
      type: object
      properties:
        advanced:
          $ref: "#/components/schemas/project_settings_advanced"
      additionalProperties: false
      example:
        advanced:
          build_prs_only: true
          set_github_status: true
          write_settings_requires_admin: true
          autocancel_builds: true
          pr_only_branch_overrides:
          - pr_only_branch_overrides
          - pr_only_branch_overrides
          setup_workflows: true
          build_fork_prs: true
          disable_ssh: true
          forks_receive_secret_env_vars: true
          oss: true
    restriction_created:
      type: object
      properties:
        id:
          type: string
          description: UUID of the project restriction
          format: uuid
        project_id:
          type: string
          description: |
            Deprecated - For "project" restrictions read the project ID from
            "restriction_value" instead.

            UUID of the project used in a project restriction.
          format: uuid
        name:
          type: string
          description: |
            Contains a human-readable reference for the restriction. For
            "project" restrictions this is the name of the project.

            May be null.
        restriction_type:
          type: string
          description: Type of the restriction
          enum:
          - project
          - expression
        restriction_value:
          type: string
          description: Value used to evaluate the restriction
      additionalProperties: false
      example:
        restriction_type: project
        project_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        restriction_value: restriction_value
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    restriction_deleted:
      type: object
      properties:
        message:
          type: string
          description: Response message
      additionalProperties: false
      example:
        message: message
    usage_export_job:
      required:
      - download_urls
      - end
      - start
      - state
      - usage_export_job_id
      type: object
      properties:
        usage_export_job_id:
          type: string
          format: uuid
        state:
          type: string
          enum:
          - created
          - processing
          - failed
          - completed
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        download_urls:
          type: array
          description: A list of pre signed urls that the client can use to download
            the results of a Usage Export.
          items:
            type: object
            additionalProperties: false
            format: uri
      additionalProperties: false
      example:
        usage_export_job_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        start: 2000-01-23T04:56:07.000+00:00
        end: 2000-01-23T04:56:07.000+00:00
        state: created
        download_urls:
        - {}
        - {}
    get_usage_export_job_status:
      required:
      - download_urls
      - state
      - usage_export_job_id
      type: object
      properties:
        usage_export_job_id:
          type: string
          format: uuid
        state:
          type: string
          enum:
          - created
          - processing
          - failed
          - completed
        download_urls:
          type: array
          description: A list of pre signed urls that the client can use to download
            the results of a Usage Export.
          items:
            type: object
            additionalProperties: false
            format: uri
        error_reason:
          type: string
      additionalProperties: false
      example:
        error_reason: error_reason
        usage_export_job_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        state: created
        download_urls:
        - {}
        - {}
    pipeline:
      type: object
      properties:
        state:
          type: string
          enum:
          - created
          - errored
          - setup-pending
          - setup
          - pending
        created_at:
          type: string
          format: date-time
        number:
          type: integer
          example: 25
        id:
          type: string
          format: uuid
      additionalProperties: false
      example:
        number: 25
        created_at: 2000-01-23T04:56:07.000+00:00
        state: created
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    pipelineRequest:
      type: object
      properties:
        definition_id:
          type: string
          description: The unique id for the pipeline definition. This can be found
            in the page Project Settings > Pipelines.
          format: uuid
          example: 2338d0ae-5541-4bbf-88a2-55e9f7281f80
        config:
          $ref: "#/components/schemas/pipelineRequest_config"
        checkout:
          $ref: "#/components/schemas/pipelineRequest_checkout"
        parameters:
          type: object
          additionalProperties: true
          description: |
            An object containing pipeline parameters and their values.
            Pipeline parameters have the following size limits: 100 max entries, 128 maximum key length, 512 maximum value length.
          example:
            example_param: my value
            example_param2: true
            example_param3: 3
      additionalProperties: false
    inline_response_200:
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Context"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      example:
        next_page_token: next_page_token
        items:
        - name: name
          created_at: 2015-09-21T17:29:21.042Z
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - name: name
          created_at: 2015-09-21T17:29:21.042Z
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    inline_response_default:
      type: object
      properties:
        message:
          type: string
    context_body:
      required:
      - name
      - owner
      type: object
      properties:
        name:
          type: string
          description: The user defined name of the context.
        owner:
          oneOf:
          - required:
            - id
            type: object
            properties:
              id:
                type: string
                description: The unique ID of the owner of the context. Specify either
                  this or slug.
                format: uuid
              type:
                type: string
                description: The type of the owner. Defaults to "organization". Accounts
                  are only used as context owners in server.
                example: organization
                enum:
                - account
                - organization
          - required:
            - slug
            type: object
            properties:
              slug:
                type: string
                description: A string that represents an organization. Specify either
                  this or id. Cannot be used for accounts.
              type:
                type: string
                description: The type of owner. Defaults to "organization". Accounts
                  are only used as context owners in server and must be specified
                  by an id instead of a slug.
                enum:
                - organization
    Context:
      title: Context
      required:
      - created_at
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the context.
          format: uuid
        name:
          type: string
          description: The user defined name of the context.
        created_at:
          type: string
          description: The date and time the context was created.
          format: date-time
          example: 2015-09-21T17:29:21.042Z
      example:
        name: name
        created_at: 2015-09-21T17:29:21.042Z
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    MessageResponse:
      title: MessageResponse
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: A human-readable message
      description: message response
      example:
        message: message
    inline_response_200_1:
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/inline_response_200_1_items"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      example:
        next_page_token: next_page_token
        items:
        - updated_at: 2015-09-21T17:29:21.042Z
          variable: POSTGRES_USER
          created_at: 2015-09-21T17:29:21.042Z
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - updated_at: 2015-09-21T17:29:21.042Z
          variable: POSTGRES_USER
          created_at: 2015-09-21T17:29:21.042Z
          context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    environmentvariable_envvarname_body:
      required:
      - value
      type: object
      properties:
        value:
          type: string
          description: The value of the environment variable
          example: some-secret-value
    inline_response_200_2:
      anyOf:
      - required:
        - context_id
        - created_at
        - updated_at
        - variable
        type: object
        properties:
          variable:
            type: string
            description: The name of the environment variable
            example: POSTGRES_USER
          created_at:
            type: string
            description: The date and time the environment variable was created.
            format: date-time
            example: 2015-09-21T17:29:21.042Z
          updated_at:
            type: string
            description: The date and time the environment variable was updated
            format: date-time
            example: 2015-09-21T17:29:21.042Z
          context_id:
            type: string
            description: ID of the context (UUID)
            format: uuid
      - title: MessageResponse
        required:
        - message
        type: object
        properties:
          message:
            type: string
            description: A human-readable message
        description: message response
    inline_response_200_3:
      type: object
      properties:
        org_id:
          description: The unique ID of the organization
        project_id:
          description: The unique ID of the project
        project_data:
          $ref: "#/components/schemas/inline_response_200_3_project_data"
        project_workflow_data:
          type: array
          description: A list of metrics and trends data for workflows for a given
            project.
          items:
            $ref: "#/components/schemas/inline_response_200_3_project_workflow_data"
        project_workflow_branch_data:
          type: array
          description: A list of metrics and trends data for branches for a given
            project.
          items:
            $ref: "#/components/schemas/inline_response_200_3_project_workflow_branch_data"
        all_branches:
          type: array
          description: A list of all the branches for a given project.
          items:
            type: string
            description: The VCS branch of a workflow's trigger.
            example: main
        all_workflows:
          type: array
          description: A list of all the workflows for a given project.
          items:
            type: string
            description: The name of the workflow.
            example: build-and-test
      example:
        project_workflow_data:
        - workflow_name: build-and-test
          metrics:
            total_runs: 0
            total_credits_used: 0
            p95_duration_secs: 7.386282
            success_rate: 1.0246457
          trends:
            total_runs: 7.4577446
            total_credits_used: 1.4894159
            p95_duration_secs: 6.846853
            success_rate: 1.1730742
        - workflow_name: build-and-test
          metrics:
            total_runs: 0
            total_credits_used: 0
            p95_duration_secs: 7.386282
            success_rate: 1.0246457
          trends:
            total_runs: 7.4577446
            total_credits_used: 1.4894159
            p95_duration_secs: 6.846853
            success_rate: 1.1730742
        project_workflow_branch_data:
        - workflow_name: build-and-test
          metrics: null
          branch: main
          trends: null
        - workflow_name: build-and-test
          metrics: null
          branch: main
          trends: null
        all_workflows:
        - build-and-test
        - build-and-test
        project_id: ""
        org_id: ""
        all_branches:
        - main
        - main
        project_data:
          metrics:
            total_runs: 0
            total_duration_secs: 0
            total_credits_used: 0
            throughput: 5.637377
            success_rate: 5.962134
          trends:
            total_runs: 2.302136
            total_duration_secs: 7.0614014
            total_credits_used: 9.301444
            throughput: 2.027123
            success_rate: 3.6160767
    inline_response_200_4:
      required:
      - items
      - next_page_token
      type: object
      properties:
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
        items:
          type: array
          description: Aggregate metrics for a workflow at a time granularity
          items:
            $ref: "#/components/schemas/inline_response_200_4_items"
      description: Project level timeseries metrics response
      example:
        next_page_token: next_page_token
        items:
        - min_started_at: 2000-01-23T04:56:07.000+00:00
          max_ended_at: 2000-01-23T04:56:07.000+00:00
          name: build-and-test
          metrics:
            total_runs: 0
            successful_runs: 0
            median_credits_used: 0
            failed_runs: 0
            total_credits_used: 0
            duration_metrics:
              total: 0
              min: 0
              median: 0
              max: 0
              p95: 0
            throughput: 5.962134
          timestamp: 2000-01-23T04:56:07.000+00:00
        - min_started_at: 2000-01-23T04:56:07.000+00:00
          max_ended_at: 2000-01-23T04:56:07.000+00:00
          name: build-and-test
          metrics:
            total_runs: 0
            successful_runs: 0
            median_credits_used: 0
            failed_runs: 0
            total_credits_used: 0
            duration_metrics:
              total: 0
              min: 0
              median: 0
              max: 0
              p95: 0
            throughput: 5.962134
          timestamp: 2000-01-23T04:56:07.000+00:00
    inline_response_200_5:
      required:
      - all_projects
      - org_data
      - org_project_data
      type: object
      properties:
        org_data:
          $ref: "#/components/schemas/inline_response_200_5_org_data"
        org_project_data:
          type: array
          description: "Metrics for a single project, across all branches"
          items:
            $ref: "#/components/schemas/inline_response_200_5_org_project_data"
        all_projects:
          type: array
          description: A list of all the project names in the organization.
          items:
            type: string
          x-nullable: true
      description: "Summary metrics with trends for the entire org, and for each project."
      example:
        org_data:
          metrics:
            total_runs: 0
            total_duration_secs: 0
            total_credits_used: 0
            throughput: 5.637377
            success_rate: 5.962134
          trends:
            total_runs: 2.302136
            total_duration_secs: 7.0614014
            total_credits_used: 9.301444
            throughput: 2.027123
            success_rate: 3.6160767
        org_project_data:
        - metrics:
            total_runs: 0
            total_duration_secs: 0
            total_credits_used: 0
            success_rate: 1.0246457
          project_name: api-preview-docs
          trends:
            total_runs: 7.4577446
            total_duration_secs: 6.846853
            total_credits_used: 1.4894159
            success_rate: 1.1730742
        - metrics:
            total_runs: 0
            total_duration_secs: 0
            total_credits_used: 0
            success_rate: 1.0246457
          project_name: api-preview-docs
          trends:
            total_runs: 7.4577446
            total_duration_secs: 6.846853
            total_credits_used: 1.4894159
            success_rate: 1.1730742
        all_projects:
        - all_projects
        - all_projects
    inline_response_200_6:
      required:
      - branches
      - org_id
      - project_id
      type: object
      properties:
        org_id:
          description: The unique ID of the organization
        project_id:
          description: The unique ID of the project
        branches:
          type: array
          description: A list of all the branches for a given project.
          items:
            type: string
            description: The VCS branch of a workflow's trigger.
            example: main
      description: Project branches response.
      example:
        project_id: ""
        org_id: ""
        branches:
        - main
        - main
    inline_response_200_7:
      required:
      - flaky-tests
      - total-flaky-tests
      type: object
      properties:
        flaky-tests:
          type: array
          description: A list of all instances of flakes. Note that a test is no longer
            considered flaky after 2 weeks have passed without a flake. Each flake
            resets this timer.
          items:
            $ref: "#/components/schemas/inline_response_200_7_flakytests"
        total-flaky-tests:
          type: number
          description: "A count of unique tests that have failed. If your project\
            \ has N tests that have flaked multiple times each, this will be equal\
            \ to N."
          format: double
          example: 5
      description: Flaky tests response
      example:
        total-flaky-tests: 5
        flaky-tests:
        - job-number: ""
          workflow-id: ""
          test-name: test-name
          job-name: job-name
          file: file
          classname: classname
          workflow-name: workflow-name
          times-flaked: 0
          time-wasted: ""
          source: source
          pipeline-number: ""
          workflow-created-at: workflow-created-at
        - job-number: ""
          workflow-id: ""
          test-name: test-name
          job-name: job-name
          file: file
          classname: classname
          workflow-name: workflow-name
          times-flaked: 0
          time-wasted: ""
          source: source
          pipeline-number: ""
          workflow-created-at: workflow-created-at
    inline_response_200_8:
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          description: Workflow summary metrics.
          items:
            $ref: "#/components/schemas/inline_response_200_8_items"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      description: Paginated workflow summary metrics.
      example:
        next_page_token: next_page_token
        items:
        - window_end: 2000-01-23T04:56:07.000+00:00
          project_id: ""
          name: build-and-test
          window_start: 2000-01-23T04:56:07.000+00:00
          metrics:
            total_runs: 0
            successful_runs: 0
            total_recoveries: 0
            mttr: 0
            total_credits_used: 0
            failed_runs: 0
            duration_metrics:
              min: 0
              median: 0
              max: 0
              mean: 0
              standard_deviation: 7.386282
              p95: 0
            throughput: 1.0246457
            success_rate: 2.302136
        - window_end: 2000-01-23T04:56:07.000+00:00
          project_id: ""
          name: build-and-test
          window_start: 2000-01-23T04:56:07.000+00:00
          metrics:
            total_runs: 0
            successful_runs: 0
            total_recoveries: 0
            mttr: 0
            total_credits_used: 0
            failed_runs: 0
            duration_metrics:
              min: 0
              median: 0
              max: 0
              mean: 0
              standard_deviation: 7.386282
              p95: 0
            throughput: 1.0246457
            success_rate: 2.302136
    inline_response_200_9:
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          description: Recent workflow runs.
          items:
            $ref: "#/components/schemas/inline_response_200_9_items"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      description: Paginated recent workflow runs.
      example:
        next_page_token: next_page_token
        items:
        - duration: 0
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          stopped_at: 2000-01-23T04:56:07.000+00:00
          branch: main
          is_approval: false
          credits_used: 0
          status: success
        - duration: 0
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          stopped_at: 2000-01-23T04:56:07.000+00:00
          branch: main
          is_approval: false
          credits_used: 0
          status: success
    inline_response_200_10:
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          description: Job summary metrics.
          items:
            $ref: "#/components/schemas/inline_response_200_10_items"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      description: Paginated workflow job summary metrics.
      example:
        next_page_token: next_page_token
        items:
        - window_end: 2000-01-23T04:56:07.000+00:00
          name: name
          window_start: 2000-01-23T04:56:07.000+00:00
          metrics:
            total_runs: 0
            successful_runs: 0
            failed_runs: 0
            duration_metrics:
              min: 0
              median: 0
              max: 0
              mean: 0
              standard_deviation: 3.6160767
              p95: 0
            total_credits_used: 0
            throughput: 7.386282
            success_rate: 2.027123
        - window_end: 2000-01-23T04:56:07.000+00:00
          name: name
          window_start: 2000-01-23T04:56:07.000+00:00
          metrics:
            total_runs: 0
            successful_runs: 0
            failed_runs: 0
            duration_metrics:
              min: 0
              median: 0
              max: 0
              mean: 0
              standard_deviation: 3.6160767
              p95: 0
            total_credits_used: 0
            throughput: 7.386282
            success_rate: 2.027123
    inline_response_200_11:
      required:
      - metrics
      - trends
      - workflow_names
      type: object
      properties:
        metrics:
          $ref: "#/components/schemas/inline_response_200_11_metrics"
        trends:
          $ref: "#/components/schemas/inline_response_200_11_trends"
        workflow_names:
          type: array
          description: A list of all the workflow names for a given project.
          items:
            type: string
      description: Workflow level aggregated metrics and trends response
      example:
        workflow_names:
        - workflow_names
        - workflow_names
        metrics:
          total_runs: 0
          successful_runs: 0
          window_end: 2000-01-23T04:56:07.000+00:00
          mttr: 0
          total_credits_used: 0
          failed_runs: 0
          duration_metrics:
            min: 0
            median: 0
            max: 0
            mean: 0
            standard_deviation: 7.386282
            p95: 0
          completed_runs: 0
          window_start: 2000-01-23T04:56:07.000+00:00
          throughput: 9.301444
          success_rate: 2.302136
        trends:
          total_runs: 3.6160767
          mttr: 1.4894159
          failed_runs: 2.027123
          total_credits_used: 1.0246457
          throughput: 6.846853
          success_rate: 4.145608
          p95_duration_secs: 7.386282
          median_duration_secs: 1.2315135
    inline_response_200_12:
      required:
      - average_test_count
      - most_failed_tests
      - most_failed_tests_extra
      - slowest_tests
      - slowest_tests_extra
      - test_runs
      - total_test_runs
      type: object
      properties:
        average_test_count:
          minimum: 0
          type: integer
          description: The average number of tests executed per run
          format: int64
        most_failed_tests:
          type: array
          description: Metrics for the most frequently failing tests
          items:
            $ref: "#/components/schemas/inline_response_200_12_most_failed_tests"
        most_failed_tests_extra:
          minimum: 0
          type: integer
          description: The number of tests with the same success rate being omitted
            from most_failed_tests
          format: int64
        slowest_tests:
          type: array
          description: Metrics for the slowest running tests
          items:
            $ref: "#/components/schemas/inline_response_200_12_most_failed_tests"
        slowest_tests_extra:
          minimum: 0
          type: integer
          description: The number of tests with the same duration rate being omitted
            from slowest_tests
          format: int64
        total_test_runs:
          minimum: 0
          type: integer
          description: The total number of test runs
          format: int64
        test_runs:
          type: array
          description: Test counts grouped by pipeline number and workflow id
          items:
            $ref: "#/components/schemas/inline_response_200_12_test_runs"
      description: Project level test metrics response
      example:
        slowest_tests_extra: 0
        most_failed_tests_extra: 0
        total_test_runs: 0
        slowest_tests:
        - null
        - null
        average_test_count: 0
        test_runs:
        - workflow_id: ""
          test_counts:
            total: 0
            failure: 0
            success: 0
            error: 0
            skipped: 0
          pipeline_number: 0
          success_rate: 3.6160767
        - workflow_id: ""
          test_counts:
            total: 0
            failure: 0
            success: 0
            error: 0
            skipped: 0
          pipeline_number: 0
          success_rate: 3.6160767
        most_failed_tests:
        - total_runs: 0
          file: file
          classname: classname
          job_name: job_name
          p95_duration: 6.027456183070403
          flaky: true
          failed_runs: 0
          source: source
          test_name: test_name
        - total_runs: 0
          file: file
          classname: classname
          job_name: job_name
          p95_duration: 6.027456183070403
          flaky: true
          failed_runs: 0
          source: source
          test_name: test_name
    User:
      title: User
      required:
      - id
      - login
      - name
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the user.
          format: uuid
        login:
          title: Login
          type: string
          description: The login information for the user on the VCS.
        name:
          type: string
          description: The name of the user.
      example:
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        login: login
    Collaboration:
      title: Collaboration
      required:
      - avatar_url
      - id
      - name
      - slug
      - vcs-type
      type: object
      properties:
        id:
          type: string
          description: The UUID of the organization
          format: uuid
          x-nullable: true
        vcs-type:
          type: string
          description: The VCS provider
        name:
          type: string
          description: The name of the organization
        avatar_url:
          type: string
          description: URL to the user's avatar on the VCS
        slug:
          type: string
          description: The slug of the organization
      example:
        vcs-type: vcs-type
        avatar_url: avatar_url
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        slug: slug
    PipelineListResponse:
      title: PipelineListResponse
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Pipeline_1"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      description: List of pipelines
      example:
        next_page_token: next_page_token
        items:
        - project_slug: gh/CircleCI-Public/api-preview-docs
          number: 25
          updated_at: 2000-01-23T04:56:07.000+00:00
          vcs:
            review_id: "123"
            target_repository_url: https://github.com/CircleCI-Public/api-preview-docs
            review_url: https://github.com/CircleCI-Public/api-preview-docs/pull/123
            commit:
              subject: subject
              body: body
            tag: v3.1.4159
            provider_name: GitHub
            branch: feature/design-new-api
            origin_repository_url: https://github.com/CircleCI-Public/api-preview-docs
            revision: f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 5034460f-c7c4-4c43-9457-de07e2029e7b
          trigger_parameters:
            key: ""
          state: created
          trigger:
            actor:
              avatar_url: avatar_url
              login: login
            received_at: 2000-01-23T04:56:07.000+00:00
            type: scheduled_pipeline
          errors:
          - type: config
            message: message
          - type: config
            message: message
        - project_slug: gh/CircleCI-Public/api-preview-docs
          number: 25
          updated_at: 2000-01-23T04:56:07.000+00:00
          vcs:
            review_id: "123"
            target_repository_url: https://github.com/CircleCI-Public/api-preview-docs
            review_url: https://github.com/CircleCI-Public/api-preview-docs/pull/123
            commit:
              subject: subject
              body: body
            tag: v3.1.4159
            provider_name: GitHub
            branch: feature/design-new-api
            origin_repository_url: https://github.com/CircleCI-Public/api-preview-docs
            revision: f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 5034460f-c7c4-4c43-9457-de07e2029e7b
          trigger_parameters:
            key: ""
          state: created
          trigger:
            actor:
              avatar_url: avatar_url
              login: login
            received_at: 2000-01-23T04:56:07.000+00:00
            type: scheduled_pipeline
          errors:
          - type: config
            message: message
          - type: config
            message: message
    pipeline_continue_body:
      required:
      - configuration
      - continuation-key
      type: object
      properties:
        continuation-key:
          title: PipelineContinuationKey
          type: string
          description: A pipeline continuation key.
        configuration:
          type: string
          description: A configuration string for the pipeline.
        parameters:
          type: object
          additionalProperties:
            anyOf:
            - type: integer
            - type: string
            - type: boolean
          description: "An object containing pipeline parameters and their values.\
            \ Pipeline parameters have the following size limits: 100 max entries,\
            \ 128 maximum key length, 512 maximum value length."
          example:
            deploy_prod: true
    Pipeline:
      title: Pipeline
      required:
      - created_at
      - errors
      - id
      - number
      - project_slug
      - state
      - trigger
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the pipeline.
          format: uuid
          example: 5034460f-c7c4-4c43-9457-de07e2029e7b
        errors:
          type: array
          description: A sequence of errors that have occurred within the pipeline.
          items:
            $ref: "#/components/schemas/PipelineListResponse_errors"
        project_slug:
          type: string
          description: The project-slug for the pipeline.
          example: gh/CircleCI-Public/api-preview-docs
        updated_at:
          type: string
          description: The date and time the pipeline was last updated.
          format: date-time
        number:
          type: integer
          description: The number of the pipeline.
          format: int64
          example: 25
        trigger_parameters:
          type: object
          additionalProperties:
            anyOf:
            - type: string
            - type: integer
              format: int64
            - type: boolean
            - type: object
        state:
          type: string
          description: The current state of the pipeline.
          enum:
          - created
          - errored
          - setup-pending
          - setup
          - pending
        created_at:
          type: string
          description: The date and time the pipeline was created.
          format: date-time
        trigger:
          $ref: "#/components/schemas/PipelineListResponse_trigger"
        vcs:
          $ref: "#/components/schemas/PipelineListResponse_vcs"
      description: A pipeline response.
      example:
        project_slug: gh/CircleCI-Public/api-preview-docs
        number: 25
        updated_at: 2000-01-23T04:56:07.000+00:00
        vcs:
          review_id: "123"
          target_repository_url: https://github.com/CircleCI-Public/api-preview-docs
          review_url: https://github.com/CircleCI-Public/api-preview-docs/pull/123
          commit:
            subject: subject
            body: body
          tag: v3.1.4159
          provider_name: GitHub
          branch: feature/design-new-api
          origin_repository_url: https://github.com/CircleCI-Public/api-preview-docs
          revision: f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 5034460f-c7c4-4c43-9457-de07e2029e7b
        trigger_parameters:
          key: ""
        state: created
        trigger:
          actor:
            avatar_url: avatar_url
            login: login
          received_at: 2000-01-23T04:56:07.000+00:00
          type: scheduled_pipeline
        errors:
        - type: config
          message: message
        - type: config
          message: message
    PipelineConfig:
      title: PipelineConfig
      required:
      - compiled
      - source
      type: object
      properties:
        source:
          type: string
          description: "The source configuration for the pipeline, before any config\
            \ compilation has been performed. If there is no config, then this field\
            \ will be empty."
        compiled:
          type: string
          description: "The compiled configuration for the pipeline, after all orb\
            \ expansion has been performed. If there were errors processing the pipeline's\
            \ configuration, then this field may be empty."
        setup-config:
          type: string
          description: "The setup configuration for the pipeline used for Setup Workflows.\
            \ If there were errors processing the pipeline's configuration or if setup\
            \ workflows are not enabled, then this field should not exist"
        compiled-setup-config:
          type: string
          description: "The compiled setup configuration for the pipeline, after all\
            \ orb expansion has been performed. If there were errors processing the\
            \ pipeline's setup workflows, then this field may be empty."
      description: The configuration strings for the pipeline.
      example:
        compiled: compiled
        setup-config: setup-config
        compiled-setup-config: compiled-setup-config
        source: source
    WorkflowListResponse:
      title: WorkflowListResponse
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          title: Workflow list
          type: array
          description: A list of workflows.
          items:
            $ref: "#/components/schemas/Workflow"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      description: A list of workflows and associated pagination token.
      example:
        next_page_token: next_page_token
        items:
        - project_slug: gh/CircleCI-Public/api-preview-docs
          canceled_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          pipeline_number: 25
          pipeline_id: 5034460f-c7c4-4c43-9457-de07e2029e7b
          name: build-and-test
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag: setup
          errored_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          stopped_at: 2000-01-23T04:56:07.000+00:00
          started_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: success
        - project_slug: gh/CircleCI-Public/api-preview-docs
          canceled_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          pipeline_number: 25
          pipeline_id: 5034460f-c7c4-4c43-9457-de07e2029e7b
          name: build-and-test
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag: setup
          errored_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          stopped_at: 2000-01-23T04:56:07.000+00:00
          started_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: success
    Project:
      title: Project
      required:
      - id
      - name
      - organization_id
      - organization_name
      - organization_slug
      - slug
      - vcs_info
      type: object
      properties:
        slug:
          type: string
          description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
            \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
            \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
            \ ID (found in Organization Settings), and replace `repo-name` with the\
            \ project ID (found in Project Settings)."
          example: gh/CircleCI-Public/api-preview-docs
        name:
          type: string
          description: The name of the project
          example: api-preview-docs
        id:
          type: string
          format: uuid
        organization_name:
          type: string
          description: The name of the organization the project belongs to
          example: CircleCI-Public
        organization_slug:
          type: string
          description: The slug of the organization the project belongs to
          example: CircleCI-Public
        organization_id:
          type: string
          description: The id of the organization the project belongs to
          format: uuid
        vcs_info:
          $ref: "#/components/schemas/Project_vcs_info"
      description: "NOTE: The definition of Project is subject to change."
      example:
        organization_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: api-preview-docs
        organization_slug: CircleCI-Public
        vcs_info:
          provider: Bitbucket
          vcs_url: https://github.com/CircleCI-Public/api-preview-docs
          default_branch: main
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        organization_name: CircleCI-Public
        slug: gh/CircleCI-Public/api-preview-docs
    CheckoutKeyListResponse:
      title: CheckoutKeyListResponse
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/CheckoutKey"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      example:
        next_page_token: next_page_token
        items:
        - fingerprint: c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f
          public-key: ssh-rsa ...
          created-at: 2015-09-21T17:29:21.042Z
          type: deploy-key
          preferred: true
        - fingerprint: c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f
          public-key: ssh-rsa ...
          created-at: 2015-09-21T17:29:21.042Z
          type: deploy-key
          preferred: true
    CheckoutKeyInput:
      title: CheckoutKeyInput
      required:
      - type
      type: object
      properties:
        type:
          title: CheckoutKeyInputType
          type: string
          description: The type of checkout key to create. This may be either `deploy-key`
            or `user-key`.
          example: deploy-key
          enum:
          - user-key
          - deploy-key
    CheckoutKey:
      title: CheckoutKey
      required:
      - created-at
      - fingerprint
      - preferred
      - public-key
      - type
      type: object
      properties:
        public-key:
          type: string
          description: A public SSH key.
          example: ssh-rsa ...
        type:
          title: CheckoutKeyType
          type: string
          description: The type of checkout key. This may be either `deploy-key` or
            `github-user-key`.
          example: deploy-key
          enum:
          - deploy-key
          - github-user-key
        fingerprint:
          type: string
          description: An SSH key fingerprint.
          example: c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f
        preferred:
          type: boolean
          description: A boolean value that indicates if this key is preferred.
          example: true
        created-at:
          type: string
          description: The date and time the checkout key was created.
          format: date-time
          example: 2015-09-21T17:29:21.042Z
      description: A checkout key
      example:
        fingerprint: c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f
        public-key: ssh-rsa ...
        created-at: 2015-09-21T17:29:21.042Z
        type: deploy-key
        preferred: true
    EnvironmentVariableListResponse:
      title: EnvironmentVariableListResponse
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/EnvironmentVariable_1"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      example:
        next_page_token: next_page_token
        items:
        - name: foo
          created-at: "#joda/inst 2023-04-14T21:20:14+0000"
          value: xxxx1234
        - name: foo
          created-at: "#joda/inst 2023-04-14T21:20:14+0000"
          value: xxxx1234
    EnvironmentVariable:
      title: EnvironmentVariable
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: The name of the environment variable.
          example: foo
        value:
          type: string
          description: The value of the environment variable.
          example: xxxx1234
      description: An environment variable request requires a name and a value
    EnvironmentVariable_1:
      title: EnvironmentVariable
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: The name of the environment variable.
          example: foo
        value:
          type: string
          description: The value of the environment variable.
          example: xxxx1234
        created-at:
          description: The creation timestamp of the environment variable.
          example: "#joda/inst 2023-04-14T21:20:14+0000"
          x-nullable: true
      description: An environment variable is a map containing a value and an optional
        timestamp.
      example:
        name: foo
        created-at: "#joda/inst 2023-04-14T21:20:14+0000"
        value: xxxx1234
    Job Details:
      title: Job Details
      required:
      - contexts
      - created_at
      - duration
      - executor
      - latest_workflow
      - messages
      - name
      - number
      - organization
      - parallel_runs
      - parallelism
      - pipeline
      - project
      - queued_at
      - started_at
      - status
      - web_url
      type: object
      properties:
        web_url:
          type: string
          description: URL of the job in CircleCI Web UI.
        project:
          $ref: "#/components/schemas/Job Details_project"
        parallel_runs:
          type: array
          description: Info about parallels runs and their status.
          items:
            $ref: "#/components/schemas/Job Details_parallel_runs"
        started_at:
          type: string
          description: The date and time the job started.
          format: date-time
        latest_workflow:
          $ref: "#/components/schemas/Job Details_latest_workflow"
        name:
          type: string
          description: The name of the job.
        executor:
          $ref: "#/components/schemas/Job Details_executor"
        parallelism:
          type: integer
          description: A number of parallel runs the job has.
          format: int64
        status:
          type: string
          description: The current status of the job.
          enum:
          - success
          - running
          - not_run
          - failed
          - retried
          - queued
          - not_running
          - infrastructure_fail
          - timedout
          - on_hold
          - terminated-unknown
          - blocked
          - canceled
          - unauthorized
        number:
          type: integer
          description: The number of the job.
          format: int64
          example: 1
        pipeline:
          $ref: "#/components/schemas/Job Details_pipeline"
        duration:
          type: integer
          description: Duration of a job in milliseconds.
          format: int64
          x-nullable: true
        created_at:
          type: string
          description: The time when the job was created.
          format: date-time
        messages:
          type: array
          description: Messages from CircleCI execution platform.
          items:
            $ref: "#/components/schemas/Job Details_messages"
        contexts:
          type: array
          description: List of contexts used by the job.
          items:
            $ref: "#/components/schemas/Job Details_contexts"
        organization:
          $ref: "#/components/schemas/Job Details_organization"
        queued_at:
          type: string
          description: The time when the job was placed in a queue.
          format: date-time
        stopped_at:
          type: string
          description: The time when the job stopped.
          format: date-time
          x-nullable: true
      description: Job Details
      example:
        latest_workflow:
          name: build-and-test
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        queued_at: 2000-01-23T04:56:07.000+00:00
        parallelism: 6
        project:
          external_url: https://github.com/CircleCI-Public/api-preview-docs
          name: api-preview-docs
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          slug: gh/CircleCI-Public/api-preview-docs
        created_at: 2000-01-23T04:56:07.000+00:00
        contexts:
        - name: name
        - name: name
        pipeline:
          id: 5034460f-c7c4-4c43-9457-de07e2029e7b
        duration: 1
        number: 1
        web_url: web_url
        executor:
          resource_class: resource_class
          type: type
        organization:
          name: name
        name: name
        started_at: 2000-01-23T04:56:07.000+00:00
        messages:
        - reason: reason
          type: type
          message: message
        - reason: reason
          type: type
          message: message
        parallel_runs:
        - index: 0
          status: status
        - index: 0
          status: status
        stopped_at: 2000-01-23T04:56:07.000+00:00
        status: success
    TriggerPipelineParameters:
      title: TriggerPipelineParameters
      type: object
      properties:
        branch:
          type: string
          description: The branch where the pipeline ran. The HEAD commit on this
            branch was used for the pipeline. Note that `branch` and `tag` are mutually
            exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head`
            for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
          example: feature/design-new-api
        tag:
          type: string
          description: The tag used by the pipeline. The commit that this tag points
            to was used for the pipeline. Note that `branch` and `tag` are mutually
            exclusive.
          example: v3.1.4159
        parameters:
          type: object
          additionalProperties:
            anyOf:
            - type: integer
            - type: string
            - type: boolean
          description: "An object containing pipeline parameters and their values.\
            \ Pipeline parameters have the following size limits: 100 max entries,\
            \ 128 maximum key length, 512 maximum value length."
          example:
            deploy_prod: true
      description: The information you can supply when triggering a pipeline.
      x-nullable: true
    PipelineCreation:
      title: PipelineCreation
      required:
      - created_at
      - id
      - number
      - state
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the pipeline.
          format: uuid
          example: 5034460f-c7c4-4c43-9457-de07e2029e7b
        state:
          type: string
          description: The current state of the pipeline.
          enum:
          - created
          - errored
          - setup-pending
          - setup
          - pending
        number:
          type: integer
          description: The number of the pipeline.
          format: int64
          example: 25
        created_at:
          type: string
          description: The date and time the pipeline was created.
          format: date-time
      description: A pipeline creation response.
      example:
        number: 25
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 5034460f-c7c4-4c43-9457-de07e2029e7b
        state: created
    inline_response_200_13:
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Schedule_1"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      description: A sequence of schedules
      example:
        next_page_token: next_page_token
        items:
        - project-slug: gh/CircleCI-Public/api-preview-docs
          actor:
            name: name
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            login: login
          updated-at: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          created-at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          parameters:
            deploy_prod: true
            branch: feature/design-new-api
          timetable: ""
        - project-slug: gh/CircleCI-Public/api-preview-docs
          actor:
            name: name
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            login: login
          updated-at: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          created-at: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          parameters:
            deploy_prod: true
            branch: feature/design-new-api
          timetable: ""
    CreateScheduleParameters:
      title: CreateScheduleParameters
      required:
      - attribution-actor
      - name
      - parameters
      - timetable
      type: object
      properties:
        name:
          type: string
          description: Name of the schedule.
        timetable:
          description: Timetable that specifies when a schedule triggers.
          anyOf:
          - required:
            - days-of-week
            - hours-of-day
            - per-hour
            type: object
            properties:
              per-hour:
                type: integer
                description: "Number of times a schedule triggers per hour, value\
                  \ must be between 1 and 60"
                format: integer
              hours-of-day:
                type: array
                description: Hours in a day in which the schedule triggers.
                items:
                  type: integer
                  description: "Hour in a day in UTC, value must be between 0 and\
                    \ 24"
                  format: integer
              days-of-week:
                type: array
                description: Days in a week in which the schedule triggers.
                items:
                  type: string
                  description: "Day in a week, in three letters format"
                  enum:
                  - TUE
                  - SAT
                  - SUN
                  - MON
                  - THU
                  - WED
                  - FRI
              days-of-month:
                type: array
                description: Days in a month in which the schedule triggers. This
                  is mutually exclusive with days in a week.
                items:
                  type: integer
                  description: "Day in a month, between 1 and 31."
                  format: integer
              months:
                type: array
                description: Months in which the schedule triggers.
                items:
                  type: string
                  description: "Month, in three letters format."
                  enum:
                  - MAR
                  - NOV
                  - DEC
                  - JUN
                  - MAY
                  - OCT
                  - FEB
                  - APR
                  - SEP
                  - AUG
                  - JAN
                  - JUL
          - required:
            - days-of-month
            - hours-of-day
            - per-hour
            type: object
            properties:
              per-hour:
                type: integer
                description: "Number of times a schedule triggers per hour, value\
                  \ must be between 1 and 60"
                format: integer
              hours-of-day:
                type: array
                description: Hours in a day in which the schedule triggers.
                items:
                  type: integer
                  description: "Hour in a day in UTC, value must be between 0 and\
                    \ 24"
                  format: integer
              days-of-month:
                type: array
                description: Days in a month in which the schedule triggers. This
                  is mutually exclusive with days in a week.
                items:
                  type: integer
                  description: "Day in a month, between 1 and 31."
                  format: integer
              days-of-week:
                type: array
                description: Days in a week in which the schedule triggers.
                items:
                  type: string
                  description: "Day in a week, in three letters format"
                  enum:
                  - TUE
                  - SAT
                  - SUN
                  - MON
                  - THU
                  - WED
                  - FRI
              months:
                type: array
                description: Months in which the schedule triggers.
                items:
                  type: string
                  description: "Month, in three letters format."
                  enum:
                  - MAR
                  - NOV
                  - DEC
                  - JUN
                  - MAY
                  - OCT
                  - FEB
                  - APR
                  - SEP
                  - AUG
                  - JAN
                  - JUL
        attribution-actor:
          type: string
          description: The attribution-actor of the scheduled pipeline.
          example: current
          enum:
          - current
          - system
        parameters:
          type: object
          additionalProperties:
            anyOf:
            - type: integer
            - type: string
            - type: boolean
          description: Pipeline parameters represented as key-value pairs. Must contain
            branch or tag.
          example:
            deploy_prod: true
            branch: feature/design-new-api
        description:
          type: string
          description: Description of the schedule.
          x-nullable: true
      description: The parameters for a create schedule request
    Schedule:
      title: Schedule
      required:
      - actor
      - created-at
      - description
      - id
      - name
      - parameters
      - project-slug
      - timetable
      - updated-at
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the schedule.
          format: uuid
        timetable:
          description: Timetable that specifies when a schedule triggers.
          anyOf:
          - required:
            - days-of-week
            - hours-of-day
            - per-hour
            type: object
            properties:
              per-hour:
                type: integer
                description: "Number of times a schedule triggers per hour, value\
                  \ must be between 1 and 60"
                format: integer
              hours-of-day:
                type: array
                description: Hours in a day in which the schedule triggers.
                items:
                  type: integer
                  description: "Hour in a day in UTC, value must be between 0 and\
                    \ 24"
                  format: integer
              days-of-week:
                type: array
                description: Days in a week in which the schedule triggers.
                items:
                  type: string
                  description: "Day in a week, in three letters format"
                  enum:
                  - TUE
                  - SAT
                  - SUN
                  - MON
                  - THU
                  - WED
                  - FRI
              days-of-month:
                type: array
                description: Days in a month in which the schedule triggers. This
                  is mutually exclusive with days in a week.
                items:
                  type: integer
                  description: "Day in a month, between 1 and 31."
                  format: integer
              months:
                type: array
                description: Months in which the schedule triggers.
                items:
                  type: string
                  description: "Month, in three letters format."
                  enum:
                  - MAR
                  - NOV
                  - DEC
                  - JUN
                  - MAY
                  - OCT
                  - FEB
                  - APR
                  - SEP
                  - AUG
                  - JAN
                  - JUL
          - required:
            - days-of-month
            - hours-of-day
            - per-hour
            type: object
            properties:
              per-hour:
                type: integer
                description: "Number of times a schedule triggers per hour, value\
                  \ must be between 1 and 60"
                format: integer
              hours-of-day:
                type: array
                description: Hours in a day in which the schedule triggers.
                items:
                  type: integer
                  description: "Hour in a day in UTC, value must be between 0 and\
                    \ 24"
                  format: integer
              days-of-month:
                type: array
                description: Days in a month in which the schedule triggers. This
                  is mutually exclusive with days in a week.
                items:
                  type: integer
                  description: "Day in a month, between 1 and 31."
                  format: integer
              days-of-week:
                type: array
                description: Days in a week in which the schedule triggers.
                items:
                  type: string
                  description: "Day in a week, in three letters format"
                  enum:
                  - TUE
                  - SAT
                  - SUN
                  - MON
                  - THU
                  - WED
                  - FRI
              months:
                type: array
                description: Months in which the schedule triggers.
                items:
                  type: string
                  description: "Month, in three letters format."
                  enum:
                  - MAR
                  - NOV
                  - DEC
                  - JUN
                  - MAY
                  - OCT
                  - FEB
                  - APR
                  - SEP
                  - AUG
                  - JAN
                  - JUL
        updated-at:
          type: string
          description: The date and time the pipeline was last updated.
          format: date-time
        name:
          type: string
          description: Name of the schedule.
        created-at:
          type: string
          description: The date and time the pipeline was created.
          format: date-time
        project-slug:
          type: string
          description: The project-slug for the schedule
          example: gh/CircleCI-Public/api-preview-docs
        parameters:
          type: object
          additionalProperties:
            anyOf:
            - type: integer
            - type: string
            - type: boolean
          description: Pipeline parameters represented as key-value pairs. Must contain
            branch or tag.
          example:
            deploy_prod: true
            branch: feature/design-new-api
        actor:
          $ref: "#/components/schemas/User_1"
        description:
          type: string
          description: Description of the schedule.
          x-nullable: true
      description: A schedule response
      example:
        project-slug: gh/CircleCI-Public/api-preview-docs
        actor:
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          login: login
        updated-at: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        created-at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        parameters:
          deploy_prod: true
          branch: feature/design-new-api
        timetable: ""
    ArtifactListResponse:
      title: ArtifactListResponse
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Artifact"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      example:
        next_page_token: next_page_token
        items:
        - path: path
          node_index: 0
          url: url
        - path: path
          node_index: 0
          url: url
    TestsResponse:
      title: TestsResponse
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          title: TestsResponse
          type: array
          items:
            $ref: "#/components/schemas/TestsResponse_items"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      example:
        next_page_token: next_page_token
        items:
        - result: ""
          file: ""
          run_time: 0.8008281904610115
          classname: ""
          name: ""
          source: ""
          message: ""
        - result: ""
          file: ""
          run_time: 0.8008281904610115
          classname: ""
          name: ""
          source: ""
          message: ""
    schedulescheduleid_timetable:
      type: object
      properties:
        per-hour:
          type: integer
          description: "Number of times a schedule triggers per hour, value must be\
            \ between 1 and 60"
          format: integer
        hours-of-day:
          type: array
          description: Hours in a day in which the schedule triggers.
          items:
            type: integer
            description: "Hour in a day in UTC, value must be between 0 and 24"
            format: integer
        days-of-week:
          type: array
          description: Days in a week in which the schedule triggers.
          items:
            type: string
            description: "Day in a week, in three letters format"
            enum:
            - TUE
            - SAT
            - SUN
            - MON
            - THU
            - WED
            - FRI
        days-of-month:
          type: array
          description: Days in a month in which the schedule triggers. This is mutually
            exclusive with days in a week.
          items:
            type: integer
            description: "Day in a month, between 1 and 31."
            format: integer
        months:
          type: array
          description: Months in which the schedule triggers.
          items:
            type: string
            description: "Month, in three letters format."
            enum:
            - MAR
            - NOV
            - DEC
            - JUN
            - MAY
            - OCT
            - FEB
            - APR
            - SEP
            - AUG
            - JAN
            - JUL
      description: Timetable that specifies when a schedule triggers.
    UpdateScheduleParameters:
      title: UpdateScheduleParameters
      type: object
      properties:
        description:
          type: string
          description: Description of the schedule.
          x-nullable: true
        name:
          type: string
          description: Name of the schedule.
        timetable:
          $ref: "#/components/schemas/schedulescheduleid_timetable"
        attribution-actor:
          type: string
          description: The attribution-actor of the scheduled pipeline.
          example: current
          enum:
          - current
          - system
        parameters:
          type: object
          additionalProperties:
            anyOf:
            - type: integer
            - type: string
            - type: boolean
          description: Pipeline parameters represented as key-value pairs. Must contain
            branch or tag.
          example:
            deploy_prod: true
            branch: feature/design-new-api
      description: The parameters for an update schedule request
    inline_response_200_14:
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Webhook_1"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      description: A list of webhooks
      example:
        next_page_token: next_page_token
        items:
        - updated-at: 2015-09-21T17:29:21.042Z
          scope:
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            type: type
          name: name
          signing-secret: signing-secret
          created-at: 2015-09-21T17:29:21.042Z
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          verify-tls: true
          url: url
          events:
          - workflow-completed
          - workflow-completed
        - updated-at: 2015-09-21T17:29:21.042Z
          scope:
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            type: type
          name: name
          signing-secret: signing-secret
          created-at: 2015-09-21T17:29:21.042Z
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          verify-tls: true
          url: url
          events:
          - workflow-completed
          - workflow-completed
    webhook_scope:
      required:
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: "ID of the scope being used (at the moment, only project ID\
            \ is supported)"
          format: uuid
        type:
          type: string
          description: Type of the scope being used
          enum:
          - project
      description: The scope in which the relevant events that will trigger webhooks
    webhook_body:
      required:
      - events
      - name
      - scope
      - signing-secret
      - url
      - verify-tls
      type: object
      properties:
        name:
          type: string
          description: Name of the webhook
        events:
          type: array
          description: Events that will trigger the webhook
          items:
            type: string
            enum:
            - workflow-completed
            - job-completed
        url:
          type: string
          description: "URL to deliver the webhook to. Note: protocol must be included\
            \ as well (only https is supported)"
        verify-tls:
          type: boolean
          description: Whether to enforce TLS certificate verification when delivering
            the webhook
        signing-secret:
          type: string
          description: Secret used to build an HMAC hash of the payload and passed
            as a header in the webhook request
        scope:
          $ref: "#/components/schemas/webhook_scope"
      description: The parameters for a create webhook request
    Webhook:
      title: Webhook
      required:
      - created-at
      - events
      - id
      - name
      - scope
      - signing-secret
      - updated-at
      - url
      - verify-tls
      type: object
      properties:
        url:
          type: string
          description: "URL to deliver the webhook to. Note: protocol must be included\
            \ as well (only https is supported)"
        verify-tls:
          type: boolean
          description: Whether to enforce TLS certificate verification when delivering
            the webhook
        id:
          type: string
          description: The unique ID of the webhook
          format: uuid
        signing-secret:
          type: string
          description: Masked value of the secret used to build an HMAC hash of the
            payload and passed as a header in the webhook request
        updated-at:
          type: string
          description: The date and time the webhook was last updated.
          format: date-time
          example: 2015-09-21T17:29:21.042Z
        name:
          type: string
          description: Name of the webhook
        created-at:
          type: string
          description: The date and time the webhook was created.
          format: date-time
          example: 2015-09-21T17:29:21.042Z
        scope:
          $ref: "#/components/schemas/inline_response_200_14_scope"
        events:
          type: array
          description: Events that will trigger the webhook
          items:
            type: string
            enum:
            - workflow-completed
            - job-completed
      example:
        updated-at: 2015-09-21T17:29:21.042Z
        scope:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          type: type
        name: name
        signing-secret: signing-secret
        created-at: 2015-09-21T17:29:21.042Z
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        verify-tls: true
        url: url
        events:
        - workflow-completed
        - workflow-completed
    webhook_webhookid_body:
      type: object
      properties:
        name:
          type: string
          description: Name of the webhook
        events:
          type: array
          description: Events that will trigger the webhook
          items:
            type: string
            enum:
            - workflow-completed
            - job-completed
        url:
          type: string
          description: "URL to deliver the webhook to. Note: protocol must be included\
            \ as well (only https is supported)"
        signing-secret:
          type: string
          description: Secret used to build an HMAC hash of the payload and passed
            as a header in the webhook request
        verify-tls:
          type: boolean
          description: Whether to enforce TLS certificate verification when delivering
            the webhook
      description: The parameters for an update webhook request
    Workflow:
      title: Workflow
      required:
      - created_at
      - id
      - name
      - pipeline_id
      - pipeline_number
      - project_slug
      - started_by
      - status
      - stopped_at
      type: object
      properties:
        pipeline_id:
          type: string
          description: The ID of the pipeline this workflow belongs to.
          format: uuid
          example: 5034460f-c7c4-4c43-9457-de07e2029e7b
        canceled_by:
          type: string
          format: uuid
        id:
          type: string
          description: The unique ID of the workflow.
          format: uuid
        name:
          type: string
          description: The name of the workflow.
          example: build-and-test
        project_slug:
          type: string
          description: The project-slug for the pipeline this workflow belongs to.
          example: gh/CircleCI-Public/api-preview-docs
        errored_by:
          type: string
          format: uuid
        tag:
          type: string
          description: Tag used for the workflow
          example: setup
          enum:
          - setup
          x-nullable: true
        status:
          type: string
          description: The current status of the workflow.
          enum:
          - success
          - running
          - not_run
          - failed
          - error
          - failing
          - on_hold
          - canceled
          - unauthorized
        started_by:
          type: string
          format: uuid
        pipeline_number:
          type: integer
          description: The number of the pipeline this workflow belongs to.
          format: int64
          example: 25
        created_at:
          type: string
          description: The date and time the workflow was created.
          format: date-time
        stopped_at:
          type: string
          description: The date and time the workflow stopped.
          format: date-time
          x-nullable: true
      description: A workflow
      example:
        project_slug: gh/CircleCI-Public/api-preview-docs
        canceled_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        pipeline_number: 25
        pipeline_id: 5034460f-c7c4-4c43-9457-de07e2029e7b
        name: build-and-test
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tag: setup
        errored_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        stopped_at: 2000-01-23T04:56:07.000+00:00
        started_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: success
    WorkflowJobListResponse:
      title: WorkflowJobListResponse
      required:
      - items
      - next_page_token
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Job"
        next_page_token:
          type: string
          description: A token to pass as a `page-token` query parameter to return
            the next page of results.
          x-nullable: true
      example:
        next_page_token: next_page_token
        items:
        - canceled_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          type: build
          dependencies:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          project_slug: gh/CircleCI-Public/api-preview-docs
          approved_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          approval_request_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          started_at: 2000-01-23T04:56:07.000+00:00
          job_number: 1
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          stopped_at: 2000-01-23T04:56:07.000+00:00
          status: success
          requires:
            d212e286-9962-4ed7-92e2-8699622ed720:
            - success
            "74be7583-44de-42a6-be75-8344de52a6f2":
            - failed
            - canceled
            a3349b77-90f7-4a39-b49b-7790f7da3943:
            - success
            - failed
            - canceled
        - canceled_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          type: build
          dependencies:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          project_slug: gh/CircleCI-Public/api-preview-docs
          approved_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          approval_request_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          started_at: 2000-01-23T04:56:07.000+00:00
          job_number: 1
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          stopped_at: 2000-01-23T04:56:07.000+00:00
          status: success
          requires:
            d212e286-9962-4ed7-92e2-8699622ed720:
            - success
            "74be7583-44de-42a6-be75-8344de52a6f2":
            - failed
            - canceled
            a3349b77-90f7-4a39-b49b-7790f7da3943:
            - success
            - failed
            - canceled
    RerunWorkflowParameters:
      title: RerunWorkflowParameters
      type: object
      properties:
        enable_ssh:
          type: boolean
          description: Whether to enable SSH access for the triggering user on the
            newly-rerun job. Requires the jobs parameter to be used and so is mutually
            exclusive with the from_failed parameter.
          example: false
        from_failed:
          type: boolean
          description: Whether to rerun the workflow from the failed job. Mutually
            exclusive with the jobs parameter.
          example: false
        jobs:
          type: array
          description: A list of job IDs to rerun.
          example:
          - c65b68ef-e73b-4bf2-be9a-7a322a9df150
          - 5e957edd-5e8c-4985-9178-5d0d69561822
          items:
            type: string
            format: uuid
        sparse_tree:
          type: boolean
          description: "Completes rerun using sparse trees logic, an optimization\
            \ for workflows that have disconnected subgraphs. Requires jobs parameter\
            \ and so is mutually exclusive with the from_failed parameter."
          example: false
      description: The information you can supply when rerunning a workflow.
      x-nullable: true
    inline_response_202:
      required:
      - workflow_id
      type: object
      properties:
        workflow_id:
          type: string
          description: The ID of the newly-created workflow.
          format: uuid
          example: 0e53027b-521a-4c40-9042-47e72b3c63a3
      description: A response to rerunning a workflow
      example:
        workflow_id: 0e53027b-521a-4c40-9042-47e72b3c63a3
    inline_response_400:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          example: "OwnerID: must be a valid UUID."
    inline_response_403:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          example: Forbidden
    inline_response_500:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          example: internal server error
    inline_response_401:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
    inline_response_500_1:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          example: unexpected server error
    context_decision_body:
      required:
      - input
      type: object
      properties:
        input:
          type: string
        metadata:
          type: object
    inline_response_400_1:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          example: "context: must be a valid value."
    inline_response_401_1:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          example: Unauthorized.
    inline_response_500_2:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          example: There was an error processing your request.
    inline_response_404:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          example: decision log not found
    inline_response_413:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          example: "http: request payload too large"
    inline_response_404_1:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          example: policy not found
    inline_response_400_2:
      type: object
      properties:
        message:
          type: string
          default: context_id is invalid.
      additionalProperties: false
    inline_response_401_2:
      type: object
      properties:
        message:
          type: string
      additionalProperties: false
    inline_response_429:
      type: object
      properties:
        message:
          type: string
          default: Rate limit exceeded.
      additionalProperties: false
    inline_response_500_3:
      type: object
      properties:
        message:
          type: string
          default: Internal server error.
      additionalProperties: false
    context_id_restrictions_body:
      type: object
      properties:
        project_id:
          type: string
          description: |
            Deprecated - Use "restriction_type" and "restriction_value"
            instead.

            The project ID to use for a project restriction. This is
            mutually exclusive with restriction_type and restriction_value
            and implies restriction_type is "project".
          format: uuid
          deprecated: true
        restriction_type:
          type: string
        restriction_value:
          type: string
      additionalProperties: false
    inline_response_400_3:
      type: object
      properties:
        message:
          type: string
          default: restriction_id is invalid.
      additionalProperties: false
    inline_response_400_4:
      type: object
      properties:
        message:
          type: string
          default: Unexpected request body provided.
      additionalProperties: false
    inline_response_403_1:
      type: object
      properties:
        message:
          type: string
          default: Permission denied.
      additionalProperties: false
    inline_response_405:
      type: object
      properties:
        message:
          type: string
          default: Create projects using the API is currently supported for classic
            Github OAuth and Bitbucket projects only.
      additionalProperties: false
    inline_response_404_2:
      type: object
      properties:
        message:
          type: string
          default: Project not found.
      additionalProperties: false
    org_id_usage_export_job_body:
      required:
      - end
      - start
      type: object
      properties:
        start:
          type: string
          description: The start date & time (inclusive) of the range from which data
            will be pulled. Must be no more than one year ago.
          format: date-time
        end:
          type: string
          description: The end date & time (inclusive) of the range from which data
            will be pulled. Must be no more than 31 days after `start`.
          format: date-time
        shared_org_ids:
          type: array
          items:
            type: string
            description: Additional shared org IDs to to include data for in the generated
              usage export.
            format: uuid
      additionalProperties: false
    DecisionLog_metadata_vcs:
      type: object
      properties:
        branch:
          type: string
        origin_repository_url:
          type: string
        release_tag:
          type: string
        target_repository_url:
          type: string
      example:
        target_repository_url: target_repository_url
        branch: branch
        origin_repository_url: origin_repository_url
        release_tag: release_tag
    DecisionLog_metadata:
      type: object
      properties:
        build_number:
          type: integer
        project_id:
          type: string
          format: uuid
        ssh_rerun:
          type: boolean
        vcs:
          $ref: "#/components/schemas/DecisionLog_metadata_vcs"
      example:
        project_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        vcs:
          target_repository_url: target_repository_url
          branch: branch
          origin_repository_url: origin_repository_url
          release_tag: release_tag
        build_number: 0
        ssh_rerun: true
    context_project_restrictions_list_items:
      type: object
      properties:
        context_id:
          type: string
          description: UUID of the context
          format: uuid
        id:
          type: string
          description: UUID of the restriction
          format: uuid
        project_id:
          type: string
          description: |
            Deprecated - For "project" restrictions read the project ID from
            "restriction_value" instead.

            UUID of the project used in a project restriction.
          format: uuid
          deprecated: true
        name:
          type: string
          description: |
            Contains a human-readable reference for the restriction. For
            "project" restrictions this is the name of the project.

            May be null.
        restriction_type:
          type: string
          description: Type of the restriction
          enum:
          - project
          - expression
        restriction_value:
          type: string
          description: Value used to evaluate the restriction
      additionalProperties: false
      example:
        restriction_type: project
        project_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        restriction_value: restriction_value
        name: name
        context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    project_settings_advanced:
      type: object
      properties:
        autocancel_builds:
          type: boolean
          description: "Except for the default branch, cancel running pipelines on\
            \ a branch when a new pipeline starts on that branch."
        build_fork_prs:
          type: boolean
          description: Run builds for pull requests from forks.
        build_prs_only:
          type: boolean
          description: "Once enabled, we will only build branches that have associated\
            \ pull requests open."
        disable_ssh:
          type: boolean
          description: "When set to true, job re-runs with SSH debugging access will\
            \ be disabled for the project."
        forks_receive_secret_env_vars:
          type: boolean
          description: "Run builds for forked pull requests with this project's configuration,\
            \ environment variables, and secrets."
        oss:
          type: boolean
          description: "Free and Open Source. Enabling this grants additional credits,\
            \ and lets others see your builds, both through the web UI and the API."
        set_github_status:
          type: boolean
          description: Report the status of every pushed commit to GitHub's status
            API. Updates reported per job.
        setup_workflows:
          type: boolean
          description: Enabling allows you to conditionally trigger configurations
            outside of the primary `.circleci` parent directory.
        write_settings_requires_admin:
          type: boolean
          description: "Whether updating these settings requires a user to be an organization\
            \ administrator. When disabled, updating settings can be done by any member."
        pr_only_branch_overrides:
          type: array
          description: "This field is used in conjunction with the `build_prs_only`,\
            \ it allows you to specify a list of branches that will always triger\
            \ a build. The value passed will overwrite the existing value."
          items:
            type: string
      additionalProperties: false
      example:
        build_prs_only: true
        set_github_status: true
        write_settings_requires_admin: true
        autocancel_builds: true
        pr_only_branch_overrides:
        - pr_only_branch_overrides
        - pr_only_branch_overrides
        setup_workflows: true
        build_fork_prs: true
        disable_ssh: true
        forks_receive_secret_env_vars: true
        oss: true
    pipelineRequest_config:
      type: object
      properties:
        branch:
          type: string
          description: |
            The branch that should be used to fetch the config file.
            Note that branch and tag are mutually exclusive.
            To trigger a pipeline for a PR by number use pull/<number>/head for the PR ref or pull/<number>/merge for the merge ref (GitHub only)
          example: main
        tag:
          type: string
          description: |
            The tag that should be used to fetch the config file.
            The commit that this tag points to is used for the pipeline.
            Note that branch and tag are mutually exclusive.
          example: v2
      additionalProperties: false
      example: "{\"branch\":\"main\"}"
    pipelineRequest_checkout:
      type: object
      properties:
        branch:
          type: string
          description: |
            The branch that should be used to check out code on a checkout step.
            Note that branch and tag are mutually exclusive.
            To trigger a pipeline for a PR by number use pull/<number>/head for the PR ref or pull/<number>/merge for the merge ref (GitHub only)
          example: main
        tag:
          type: string
          description: |
            The tag that should be used to check out code on a checkout step.
            The commit that this tag points to is used for the pipeline. Note that branch and tag are mutually exclusive.
          example: v2
      additionalProperties: false
      example: "{\"tag\":\"v2\"}"
    inline_response_200_1_items:
      required:
      - context_id
      - created_at
      - updated_at
      - variable
      type: object
      properties:
        variable:
          type: string
          description: The name of the environment variable
          example: POSTGRES_USER
        created_at:
          type: string
          description: The date and time the environment variable was created.
          format: date-time
          example: 2015-09-21T17:29:21.042Z
        updated_at:
          type: string
          description: The date and time the environment variable was updated
          format: date-time
          example: 2015-09-21T17:29:21.042Z
        context_id:
          type: string
          description: ID of the context (UUID)
          format: uuid
      example:
        updated_at: 2015-09-21T17:29:21.042Z
        variable: POSTGRES_USER
        created_at: 2015-09-21T17:29:21.042Z
        context_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    inline_response_200_3_project_data_metrics:
      required:
      - success_rate
      - throughput
      - total_credits_used
      - total_duration_secs
      - total_runs
      type: object
      properties:
        total_runs:
          minimum: 0
          type: integer
          description: "The total number of runs, including runs that are still on-hold\
            \ or running."
          format: int64
        total_duration_secs:
          minimum: 0
          type: integer
          description: "Total duration, in seconds."
          format: int64
        total_credits_used:
          minimum: 0
          type: integer
          description: The total credits consumed over the current timeseries interval.
          format: int64
        success_rate:
          type: number
          format: float
        throughput:
          type: number
          description: The average number of runs per day.
          format: float
      description: Metrics aggregated across all workflows and branches for a project.
      example:
        total_runs: 0
        total_duration_secs: 0
        total_credits_used: 0
        throughput: 5.637377
        success_rate: 5.962134
    inline_response_200_3_project_data_trends:
      required:
      - success_rate
      - throughput
      - total_credits_used
      - total_duration_secs
      - total_runs
      type: object
      properties:
        total_runs:
          type: number
          description: The trend value for total number of runs.
          format: float
        total_duration_secs:
          type: number
          description: Trend value for total duration.
          format: float
        total_credits_used:
          type: number
          description: The trend value for total credits consumed.
          format: float
        success_rate:
          type: number
          description: The trend value for the success rate.
          format: float
        throughput:
          type: number
          description: Trend value for the average number of runs per day.
          format: float
      description: Metric trends aggregated across all workflows and branches for
        a project.
      example:
        total_runs: 2.302136
        total_duration_secs: 7.0614014
        total_credits_used: 9.301444
        throughput: 2.027123
        success_rate: 3.6160767
    inline_response_200_3_project_data:
      required:
      - metrics
      - trends
      type: object
      properties:
        metrics:
          $ref: "#/components/schemas/inline_response_200_3_project_data_metrics"
        trends:
          $ref: "#/components/schemas/inline_response_200_3_project_data_trends"
      description: Metrics and trends data aggregated for a given project.
      example:
        metrics:
          total_runs: 0
          total_duration_secs: 0
          total_credits_used: 0
          throughput: 5.637377
          success_rate: 5.962134
        trends:
          total_runs: 2.302136
          total_duration_secs: 7.0614014
          total_credits_used: 9.301444
          throughput: 2.027123
          success_rate: 3.6160767
    inline_response_200_3_metrics:
      required:
      - p95_duration_secs
      - success_rate
      - total_credits_used
      - total_runs
      type: object
      properties:
        total_credits_used:
          minimum: 0
          type: integer
          description: The total credits consumed over the current timeseries interval.
          format: int64
        p95_duration_secs:
          type: number
          description: The 95th percentile duration among a group of workflow runs.
          format: float
        total_runs:
          minimum: 0
          type: integer
          description: "The total number of runs, including runs that are still on-hold\
            \ or running."
          format: int64
        success_rate:
          type: number
          format: float
      description: Metrics aggregated across a workflow or branchfor a project.
      example:
        total_runs: 0
        total_credits_used: 0
        p95_duration_secs: 7.386282
        success_rate: 1.0246457
    inline_response_200_3_trends:
      required:
      - p95_duration_secs
      - success_rate
      - total_credits_used
      - total_runs
      type: object
      properties:
        total_credits_used:
          type: number
          description: The trend value for total credits consumed.
          format: float
        p95_duration_secs:
          type: number
          description: The 95th percentile duration among a group of workflow runs.
          format: float
        total_runs:
          type: number
          description: The trend value for total number of runs.
          format: float
        success_rate:
          type: number
          description: The trend value for the success rate.
          format: float
      description: Trends aggregated across a workflow or branch for a project.
      example:
        total_runs: 7.4577446
        total_credits_used: 1.4894159
        p95_duration_secs: 6.846853
        success_rate: 1.1730742
    inline_response_200_3_project_workflow_data:
      required:
      - metrics
      - trends
      - workflow_name
      type: object
      properties:
        workflow_name:
          type: string
          description: The name of the workflow.
          example: build-and-test
        metrics:
          $ref: "#/components/schemas/inline_response_200_3_metrics"
        trends:
          $ref: "#/components/schemas/inline_response_200_3_trends"
      example:
        workflow_name: build-and-test
        metrics:
          total_runs: 0
          total_credits_used: 0
          p95_duration_secs: 7.386282
          success_rate: 1.0246457
        trends:
          total_runs: 7.4577446
          total_credits_used: 1.4894159
          p95_duration_secs: 6.846853
          success_rate: 1.1730742
    inline_response_200_3_project_workflow_branch_data:
      required:
      - branch
      - metrics
      - trends
      - workflow_name
      type: object
      properties:
        workflow_name:
          type: string
          description: The name of the workflow.
          example: build-and-test
        branch:
          type: string
          description: The VCS branch of a workflow's trigger.
          example: main
        metrics:
          $ref: "#/components/schemas/inline_response_200_3_metrics"
        trends:
          $ref: "#/components/schemas/inline_response_200_3_trends"
      example:
        workflow_name: build-and-test
        metrics: null
        branch: main
        trends: null
    inline_response_200_4_metrics_duration_metrics:
      required:
      - max
      - median
      - min
      - p95
      - total
      type: object
      properties:
        min:
          minimum: 0
          type: integer
          description: "The minimum duration, in seconds, among a group of runs."
          format: int64
          x-nullable: true
        median:
          minimum: 0
          type: integer
          description: "The median duration, in seconds, among a group of runs."
          format: int64
          x-nullable: true
        max:
          minimum: 0
          type: integer
          description: "The max duration, in seconds, among a group of runs."
          format: int64
          x-nullable: true
        p95:
          minimum: 0
          type: integer
          description: "The 95th percentile duration, in seconds, among a group of\
            \ runs."
          format: int64
          x-nullable: true
        total:
          minimum: 0
          type: integer
          description: "The total duration, in seconds, added across a group of runs."
          format: int64
          x-nullable: true
      description: Metrics relating to the duration of runs for a workflow.
      example:
        total: 0
        min: 0
        median: 0
        max: 0
        p95: 0
    inline_response_200_4_metrics:
      required:
      - duration_metrics
      - failed_runs
      - median_credits_used
      - successful_runs
      - throughput
      - total_credits_used
      - total_runs
      type: object
      properties:
        total_runs:
          minimum: 0
          type: integer
          description: "The total number of runs, including runs that are still on-hold\
            \ or running."
          format: int64
        failed_runs:
          minimum: 0
          type: integer
          description: The number of failed runs.
          format: int64
        successful_runs:
          minimum: 0
          type: integer
          description: The number of successful runs.
          format: int64
        throughput:
          type: number
          description: The average number of runs per day.
          format: float
        median_credits_used:
          minimum: 0
          type: integer
          description: The median credits consumed over the current timeseries interval.
          format: int64
        total_credits_used:
          minimum: 0
          type: integer
          description: The total credits consumed over the current timeseries interval.
          format: int64
        duration_metrics:
          $ref: "#/components/schemas/inline_response_200_4_metrics_duration_metrics"
      description: Metrics relating to a workflow's runs.
      example:
        total_runs: 0
        successful_runs: 0
        median_credits_used: 0
        failed_runs: 0
        total_credits_used: 0
        duration_metrics:
          total: 0
          min: 0
          median: 0
          max: 0
          p95: 0
        throughput: 5.962134
    inline_response_200_4_items:
      required:
      - max_ended_at
      - metrics
      - min_started_at
      - name
      - timestamp
      type: object
      properties:
        name:
          type: string
          description: The name of the workflow.
          example: build-and-test
        min_started_at:
          type: string
          description: The start time for the earliest execution included in the metrics.
          format: date-time
        max_ended_at:
          type: string
          description: The end time of the last execution included in the metrics.
          format: date-time
        timestamp:
          type: string
          description: The start of the interval for timeseries metrics.
          format: date-time
        metrics:
          $ref: "#/components/schemas/inline_response_200_4_metrics"
      example:
        min_started_at: 2000-01-23T04:56:07.000+00:00
        max_ended_at: 2000-01-23T04:56:07.000+00:00
        name: build-and-test
        metrics:
          total_runs: 0
          successful_runs: 0
          median_credits_used: 0
          failed_runs: 0
          total_credits_used: 0
          duration_metrics:
            total: 0
            min: 0
            median: 0
            max: 0
            p95: 0
          throughput: 5.962134
        timestamp: 2000-01-23T04:56:07.000+00:00
    inline_response_200_5_org_data_metrics:
      required:
      - success_rate
      - throughput
      - total_credits_used
      - total_duration_secs
      - total_runs
      type: object
      properties:
        total_runs:
          minimum: 0
          type: integer
          description: "The total number of runs, including runs that are still on-hold\
            \ or running."
          format: int64
        total_duration_secs:
          minimum: 0
          type: integer
          description: "Total duration, in seconds."
          format: int64
        total_credits_used:
          minimum: 0
          type: integer
          description: The total credits consumed over the current timeseries interval.
          format: int64
        success_rate:
          type: number
          format: float
        throughput:
          type: number
          description: The average number of runs per day.
          format: float
      description: Metrics for a single org metrics.
      example:
        total_runs: 0
        total_duration_secs: 0
        total_credits_used: 0
        throughput: 5.637377
        success_rate: 5.962134
    inline_response_200_5_org_data_trends:
      required:
      - success_rate
      - throughput
      - total_credits_used
      - total_duration_secs
      - total_runs
      type: object
      properties:
        total_runs:
          type: number
          description: The trend value for total number of runs.
          format: float
        total_duration_secs:
          type: number
          description: Trend value for total duration.
          format: float
        total_credits_used:
          type: number
          description: The trend value for total credits consumed.
          format: float
        success_rate:
          type: number
          description: The trend value for the success rate.
          format: float
        throughput:
          type: number
          description: Trend value for the average number of runs per day.
          format: float
      description: Trends for a single org.
      example:
        total_runs: 2.302136
        total_duration_secs: 7.0614014
        total_credits_used: 9.301444
        throughput: 2.027123
        success_rate: 3.6160767
    inline_response_200_5_org_data:
      required:
      - metrics
      - trends
      type: object
      properties:
        metrics:
          $ref: "#/components/schemas/inline_response_200_5_org_data_metrics"
        trends:
          $ref: "#/components/schemas/inline_response_200_5_org_data_trends"
      description: "Aggregated metrics for an org, with trends."
      example:
        metrics:
          total_runs: 0
          total_duration_secs: 0
          total_credits_used: 0
          throughput: 5.637377
          success_rate: 5.962134
        trends:
          total_runs: 2.302136
          total_duration_secs: 7.0614014
          total_credits_used: 9.301444
          throughput: 2.027123
          success_rate: 3.6160767
    inline_response_200_5_metrics:
      required:
      - success_rate
      - total_credits_used
      - total_duration_secs
      - total_runs
      type: object
      properties:
        total_credits_used:
          minimum: 0
          type: integer
          description: The total credits consumed over the current timeseries interval.
          format: int64
        total_duration_secs:
          minimum: 0
          type: integer
          description: "Total duration, in seconds."
          format: int64
        total_runs:
          minimum: 0
          type: integer
          description: "The total number of runs, including runs that are still on-hold\
            \ or running."
          format: int64
        success_rate:
          type: number
          format: float
      description: "Metrics for a single project, across all branches."
      example:
        total_runs: 0
        total_duration_secs: 0
        total_credits_used: 0
        success_rate: 1.0246457
    inline_response_200_5_trends:
      required:
      - success_rate
      - total_credits_used
      - total_duration_secs
      - total_runs
      type: object
      properties:
        total_credits_used:
          type: number
          description: The trend value for total credits consumed.
          format: float
        total_duration_secs:
          type: number
          description: Trend value for total duration.
          format: float
        total_runs:
          type: number
          description: The trend value for total number of runs.
          format: float
        success_rate:
          type: number
          description: The trend value for the success rate.
          format: float
      description: "Trends for a single project, across all branches."
      example:
        total_runs: 7.4577446
        total_duration_secs: 6.846853
        total_credits_used: 1.4894159
        success_rate: 1.1730742
    inline_response_200_5_org_project_data:
      required:
      - metrics
      - project_name
      - trends
      type: object
      properties:
        project_name:
          type: string
          description: The name of the project.
          example: api-preview-docs
        metrics:
          $ref: "#/components/schemas/inline_response_200_5_metrics"
        trends:
          $ref: "#/components/schemas/inline_response_200_5_trends"
      example:
        metrics:
          total_runs: 0
          total_duration_secs: 0
          total_credits_used: 0
          success_rate: 1.0246457
        project_name: api-preview-docs
        trends:
          total_runs: 7.4577446
          total_duration_secs: 6.846853
          total_credits_used: 1.4894159
          success_rate: 1.1730742
    inline_response_200_7_flakytests:
      required:
      - classname
      - file
      - job-name
      - job-number
      - pipeline-number
      - source
      - test-name
      - times-flaked
      - workflow-created-at
      - workflow-id
      - workflow-name
      type: object
      properties:
        time-wasted:
          allOf:
          - type: integer
            format: int64
          - minimum: 0
            type: integer
            format: int64
        workflow-created-at:
          type: string
          description: The date and time when workflow was created.
        workflow-id:
          description: The ID of the workflow associated with the provided test counts
        classname:
          type: string
          description: The class the test belongs to.
          x-nullable: true
        pipeline-number:
          description: The number of the pipeline.
          allOf:
          - type: integer
            format: int64
          - minimum: 0
            type: integer
            format: int64
        workflow-name:
          type: string
          description: The name of the workflow.
        test-name:
          type: string
          description: The name of the test.
        job-name:
          type: string
          description: The name of the job.
        job-number:
          description: The number of the job.
          allOf:
          - type: integer
            format: int64
          - minimum: 0
            type: integer
            format: int64
        times-flaked:
          minimum: 0
          type: integer
          description: The number of times the test flaked.
          format: int64
        source:
          type: string
          description: The source of the test.
          x-nullable: true
        file:
          type: string
          description: The file the test belongs to.
          x-nullable: true
      example:
        job-number: ""
        workflow-id: ""
        test-name: test-name
        job-name: job-name
        file: file
        classname: classname
        workflow-name: workflow-name
        times-flaked: 0
        time-wasted: ""
        source: source
        pipeline-number: ""
        workflow-created-at: workflow-created-at
    inline_response_200_8_metrics_duration_metrics:
      required:
      - max
      - mean
      - median
      - min
      - p95
      - standard_deviation
      type: object
      properties:
        min:
          minimum: 0
          type: integer
          description: "The minimum duration, in seconds, among a group of runs."
          format: int64
          x-nullable: true
        mean:
          minimum: 0
          type: integer
          description: "The mean duration, in seconds, among a group of runs."
          format: int64
          x-nullable: true
        median:
          minimum: 0
          type: integer
          description: "The median duration, in seconds, among a group of runs."
          format: int64
          x-nullable: true
        p95:
          minimum: 0
          type: integer
          description: "The 95th percentile duration, in seconds, among a group of\
            \ runs."
          format: int64
          x-nullable: true
        max:
          minimum: 0
          type: integer
          description: "The max duration, in seconds, among a group of runs."
          format: int64
          x-nullable: true
        standard_deviation:
          type: number
          description: "The standard deviation, in seconds, among a group of runs."
          format: float
          x-nullable: true
      description: Metrics relating to the duration of runs for a workflow.
      example:
        min: 0
        median: 0
        max: 0
        mean: 0
        standard_deviation: 7.386282
        p95: 0
    inline_response_200_8_metrics:
      required:
      - duration_metrics
      - failed_runs
      - mttr
      - success_rate
      - successful_runs
      - throughput
      - total_credits_used
      - total_recoveries
      - total_runs
      type: object
      properties:
        total_runs:
          minimum: 0
          type: integer
          description: "The total number of runs, including runs that are still on-hold\
            \ or running."
          format: int64
        successful_runs:
          minimum: 0
          type: integer
          description: The number of successful runs.
          format: int64
        mttr:
          minimum: 0
          type: integer
          description: The mean time to recovery (mean time between failures and their
            next success) in seconds.
          format: int64
          x-nullable: true
        total_credits_used:
          minimum: 0
          type: integer
          description: The total credits consumed by the workflow in the aggregation
            window. Note that Insights is not a real time financial reporting tool
            and should not be used for credit reporting.
          format: int64
          x-nullable: true
        failed_runs:
          minimum: 0
          type: integer
          description: The number of failed runs.
          format: int64
        success_rate:
          type: number
          format: float
        duration_metrics:
          $ref: "#/components/schemas/inline_response_200_8_metrics_duration_metrics"
        total_recoveries:
          minimum: 0
          type: integer
          description: The number of recovered workflow executions per day.
          format: int64
          x-nullable: true
        throughput:
          type: number
          description: The average number of runs per day.
          format: float
      description: Metrics relating to a workflow's runs.
      example:
        total_runs: 0
        successful_runs: 0
        total_recoveries: 0
        mttr: 0
        total_credits_used: 0
        failed_runs: 0
        duration_metrics:
          min: 0
          median: 0
          max: 0
          mean: 0
          standard_deviation: 7.386282
          p95: 0
        throughput: 1.0246457
        success_rate: 2.302136
    inline_response_200_8_items:
      required:
      - metrics
      - name
      - project_id
      - window_end
      - window_start
      type: object
      properties:
        name:
          type: string
          description: The name of the workflow.
          example: build-and-test
        metrics:
          $ref: "#/components/schemas/inline_response_200_8_metrics"
        window_start:
          type: string
          description: The timestamp of the first build within the requested reporting
            window.
          format: date-time
        window_end:
          type: string
          description: The timestamp of the last build within the requested reporting
            window.
          format: date-time
        project_id:
          description: The unique ID of the project
      example:
        window_end: 2000-01-23T04:56:07.000+00:00
        project_id: ""
        name: build-and-test
        window_start: 2000-01-23T04:56:07.000+00:00
        metrics:
          total_runs: 0
          successful_runs: 0
          total_recoveries: 0
          mttr: 0
          total_credits_used: 0
          failed_runs: 0
          duration_metrics:
            min: 0
            median: 0
            max: 0
            mean: 0
            standard_deviation: 7.386282
            p95: 0
          throughput: 1.0246457
          success_rate: 2.302136
    inline_response_200_9_items:
      required:
      - branch
      - created_at
      - credits_used
      - duration
      - id
      - is_approval
      - status
      - stopped_at
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the workflow.
          format: uuid
        branch:
          type: string
          description: The VCS branch of a Workflow's trigger.
          example: main
        duration:
          minimum: 0
          type: integer
          description: The duration in seconds of a run.
          format: int64
          x-nullable: true
        created_at:
          type: string
          description: The date and time the workflow was created.
          format: date-time
        stopped_at:
          type: string
          description: The date and time the workflow stopped.
          format: date-time
          x-nullable: true
        credits_used:
          minimum: 0
          type: integer
          description: The number of credits used during execution. Note that Insights
            is not a real time financial reporting tool and should not be used for
            credit reporting.
          format: int64
        status:
          type: string
          description: Workflow status.
          enum:
          - success
          - failed
          - error
          - canceled
          - unauthorized
          x-nullable: true
        is_approval:
          type: boolean
          description: Describes if the job is an approval job or not. Approval jobs
            are intermediary jobs that are created to pause the workflow until approved.
          example: false
      example:
        duration: 0
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        stopped_at: 2000-01-23T04:56:07.000+00:00
        branch: main
        is_approval: false
        credits_used: 0
        status: success
    inline_response_200_10_metrics_duration_metrics:
      required:
      - max
      - mean
      - median
      - min
      - p95
      - standard_deviation
      type: object
      properties:
        min:
          minimum: 0
          type: integer
          description: "The minimum duration, in seconds, among a group of runs."
          format: int64
          x-nullable: true
        mean:
          minimum: 0
          type: integer
          description: "The mean duration, in seconds, among a group of runs."
          format: int64
          x-nullable: true
        median:
          minimum: 0
          type: integer
          description: "The median duration, in seconds, among a group of runs."
          format: int64
          x-nullable: true
        p95:
          minimum: 0
          type: integer
          description: "The 95th percentile duration, in seconds, among a group of\
            \ runs."
          format: int64
          x-nullable: true
        max:
          minimum: 0
          type: integer
          description: "The max duration, in seconds, among a group of runs."
          format: int64
          x-nullable: true
        standard_deviation:
          type: number
          description: "The standard deviation, in seconds, among a group of runs."
          format: float
          x-nullable: true
      description: Metrics relating to the duration of runs for a workflow job.
      example:
        min: 0
        median: 0
        max: 0
        mean: 0
        standard_deviation: 3.6160767
        p95: 0
    inline_response_200_10_metrics:
      required:
      - duration_metrics
      - failed_runs
      - success_rate
      - successful_runs
      - throughput
      - total_credits_used
      - total_runs
      type: object
      properties:
        total_runs:
          minimum: 0
          type: integer
          description: "The total number of runs, including runs that are still on-hold\
            \ or running."
          format: int64
        failed_runs:
          minimum: 0
          type: integer
          description: The number of failed runs.
          format: int64
        successful_runs:
          minimum: 0
          type: integer
          description: The number of successful runs.
          format: int64
        duration_metrics:
          $ref: "#/components/schemas/inline_response_200_10_metrics_duration_metrics"
        success_rate:
          type: number
          format: float
        total_credits_used:
          minimum: 0
          type: integer
          description: The total credits consumed by the job in the aggregation window.
            Note that Insights is not a real time financial reporting tool and should
            not be used for credit reporting.
          format: int64
        throughput:
          type: number
          description: The average number of runs per day.
          format: float
      description: Metrics relating to a workflow job's runs.
      example:
        total_runs: 0
        successful_runs: 0
        failed_runs: 0
        duration_metrics:
          min: 0
          median: 0
          max: 0
          mean: 0
          standard_deviation: 3.6160767
          p95: 0
        total_credits_used: 0
        throughput: 7.386282
        success_rate: 2.027123
    inline_response_200_10_items:
      required:
      - metrics
      - name
      - window_end
      - window_start
      type: object
      properties:
        name:
          type: string
          description: The name of the job.
        metrics:
          $ref: "#/components/schemas/inline_response_200_10_metrics"
        window_start:
          type: string
          description: The timestamp of the first build within the requested reporting
            window.
          format: date-time
        window_end:
          type: string
          description: The timestamp of the last build within the requested reporting
            window.
          format: date-time
      example:
        window_end: 2000-01-23T04:56:07.000+00:00
        name: name
        window_start: 2000-01-23T04:56:07.000+00:00
        metrics:
          total_runs: 0
          successful_runs: 0
          failed_runs: 0
          duration_metrics:
            min: 0
            median: 0
            max: 0
            mean: 0
            standard_deviation: 3.6160767
            p95: 0
          total_credits_used: 0
          throughput: 7.386282
          success_rate: 2.027123
    inline_response_200_11_metrics:
      required:
      - completed_runs
      - duration_metrics
      - failed_runs
      - mttr
      - success_rate
      - successful_runs
      - throughput
      - total_credits_used
      - total_runs
      - window_end
      - window_start
      type: object
      properties:
        total_runs:
          minimum: 0
          type: integer
          description: "The total number of runs, including runs that are still on-hold\
            \ or running."
          format: int64
        successful_runs:
          minimum: 0
          type: integer
          description: The number of successful runs.
          format: int64
        mttr:
          minimum: 0
          type: integer
          description: The mean time to recovery (mean time between failures and their
            next success) in seconds.
          format: int64
          x-nullable: true
        total_credits_used:
          minimum: 0
          type: integer
          description: The total credits consumed by the workflow in the aggregation
            window. Note that Insights is not a real time financial reporting tool
            and should not be used for credit reporting.
          format: int64
          x-nullable: true
        failed_runs:
          minimum: 0
          type: integer
          description: The number of failed runs.
          format: int64
        success_rate:
          type: number
          format: float
        completed_runs:
          minimum: 0
          type: integer
          description: The number of runs that ran to completion within the aggregation
            window
          format: int64
          x-nullable: true
        window_start:
          type: string
          description: The timestamp of the first build within the requested reporting
            window.
          format: date-time
        duration_metrics:
          $ref: "#/components/schemas/inline_response_200_8_metrics_duration_metrics"
        window_end:
          type: string
          description: The timestamp of the last build within the requested reporting
            window.
          format: date-time
        throughput:
          type: number
          description: The average number of runs per day.
          format: float
      description: Metrics aggregated across a workflow for a given time window.
      example:
        total_runs: 0
        successful_runs: 0
        window_end: 2000-01-23T04:56:07.000+00:00
        mttr: 0
        total_credits_used: 0
        failed_runs: 0
        duration_metrics:
          min: 0
          median: 0
          max: 0
          mean: 0
          standard_deviation: 7.386282
          p95: 0
        completed_runs: 0
        window_start: 2000-01-23T04:56:07.000+00:00
        throughput: 9.301444
        success_rate: 2.302136
    inline_response_200_11_trends:
      required:
      - failed_runs
      - median_duration_secs
      - mttr
      - p95_duration_secs
      - success_rate
      - throughput
      - total_credits_used
      - total_runs
      type: object
      properties:
        total_runs:
          type: number
          description: The trend value for total number of runs.
          format: float
        failed_runs:
          type: number
          description: The trend value for number of failed runs.
          format: float
        success_rate:
          type: number
          description: The trend value for the success rate.
          format: float
        p95_duration_secs:
          type: number
          description: Trend value for the 95th percentile duration for a workflow
            for a given time window.
          format: float
        median_duration_secs:
          type: number
          description: Trend value for the 50th percentile duration for a workflow
            for a given time window.
          format: float
        total_credits_used:
          type: number
          description: The trend value for total credits consumed.
          format: float
        mttr:
          type: number
          description: trend for mean time to recovery (mean time between failures
            and their next success).
          format: float
        throughput:
          type: number
          description: Trend value for the average number of runs per day.
          format: float
      description: Trends for aggregated metrics across a workflow for a given time
        window.
      example:
        total_runs: 3.6160767
        mttr: 1.4894159
        failed_runs: 2.027123
        total_credits_used: 1.0246457
        throughput: 6.846853
        success_rate: 4.145608
        p95_duration_secs: 7.386282
        median_duration_secs: 1.2315135
    inline_response_200_12_most_failed_tests:
      required:
      - classname
      - failed_runs
      - file
      - flaky
      - job_name
      - p95_duration
      - source
      - test_name
      - total_runs
      type: object
      properties:
        p95_duration:
          type: number
          description: "The 95th percentile duration, in seconds, among a group of\
            \ test runs."
          format: double
          x-nullable: true
        total_runs:
          minimum: 0
          type: integer
          description: The total number of times the test was run.
          format: int64
        classname:
          type: string
          description: The class the test belongs to.
          x-nullable: true
        failed_runs:
          minimum: 0
          type: integer
          description: The number of times the test failed
          format: int64
        flaky:
          type: boolean
          description: Whether the test is flaky.
        source:
          type: string
          description: The source of the test.
          x-nullable: true
        file:
          type: string
          description: The file the test belongs to.
          x-nullable: true
        job_name:
          type: string
          description: The name of the job.
        test_name:
          type: string
          description: The name of the test.
      example:
        total_runs: 0
        file: file
        classname: classname
        job_name: job_name
        p95_duration: 6.027456183070403
        flaky: true
        failed_runs: 0
        source: source
        test_name: test_name
    inline_response_200_12_test_counts:
      required:
      - error
      - failure
      - skipped
      - success
      - total
      type: object
      properties:
        error:
          minimum: 0
          type: integer
          description: The number of tests with the error status
          format: int64
        failure:
          minimum: 0
          type: integer
          description: The number of tests with the failure status
          format: int64
        skipped:
          minimum: 0
          type: integer
          description: The number of tests with the skipped status
          format: int64
        success:
          minimum: 0
          type: integer
          description: The number of tests with the success status
          format: int64
        total:
          minimum: 0
          type: integer
          description: The total number of tests
          format: int64
      description: Test counts for a given pipeline number
      example:
        total: 0
        failure: 0
        success: 0
        error: 0
        skipped: 0
    inline_response_200_12_test_runs:
      required:
      - pipeline_number
      - success_rate
      - test_counts
      - workflow_id
      type: object
      properties:
        pipeline_number:
          minimum: 0
          type: integer
          description: The number of the pipeline associated with the provided test
            counts
          format: int64
        workflow_id:
          description: The ID of the workflow associated with the provided test counts
        success_rate:
          type: number
          description: The success rate calculated from test counts
          format: float
        test_counts:
          $ref: "#/components/schemas/inline_response_200_12_test_counts"
      example:
        workflow_id: ""
        test_counts:
          total: 0
          failure: 0
          success: 0
          error: 0
          skipped: 0
        pipeline_number: 0
        success_rate: 3.6160767
    PipelineListResponse_errors:
      required:
      - message
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of error.
          enum:
          - config
          - config-fetch
          - timeout
          - permission
          - other
          - trigger-rule
          - plan
        message:
          type: string
          description: A human-readable error message.
      description: An error with a type and message.
      example:
        type: config
        message: message
    PipelineListResponse_trigger_actor:
      required:
      - avatar_url
      - login
      type: object
      properties:
        login:
          title: Login
          type: string
          description: The login information for the user on the VCS.
        avatar_url:
          type: string
          description: URL to the user's avatar on the VCS
          x-nullable: true
      description: The user who triggered the Pipeline.
      example:
        avatar_url: avatar_url
        login: login
    PipelineListResponse_trigger:
      required:
      - actor
      - received_at
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of trigger.
          enum:
          - scheduled_pipeline
          - explicit
          - api
          - webhook
        received_at:
          type: string
          description: The date and time the trigger was received.
          format: date-time
        actor:
          $ref: "#/components/schemas/PipelineListResponse_trigger_actor"
      description: A summary of the trigger.
      example:
        actor:
          avatar_url: avatar_url
          login: login
        received_at: 2000-01-23T04:56:07.000+00:00
        type: scheduled_pipeline
    PipelineListResponse_vcs_commit:
      required:
      - body
      - subject
      type: object
      properties:
        subject:
          type: string
          description: The subject of the commit message.
          x-nullable: true
        body:
          type: string
          description: The body of the commit message.
          x-nullable: true
      description: The latest commit in the pipeline.
      example:
        subject: subject
        body: body
    PipelineListResponse_vcs:
      required:
      - origin_repository_url
      - provider_name
      - revision
      - target_repository_url
      type: object
      properties:
        provider_name:
          type: string
          description: "Name of the VCS provider (e.g. GitHub, Bitbucket)."
          example: GitHub
        target_repository_url:
          type: string
          description: "URL for the repository the trigger targets (i.e. the repository\
            \ where the PR will be merged). For fork-PR pipelines, this is the URL\
            \ to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s\
            \ will be the same."
          example: https://github.com/CircleCI-Public/api-preview-docs
        branch:
          type: string
          description: The branch where the pipeline ran. The HEAD commit on this
            branch was used for the pipeline. Note that `branch` and `tag` are mutually
            exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head`
            for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
          example: feature/design-new-api
        review_id:
          type: string
          description: The code review id.
          example: "123"
        review_url:
          type: string
          description: The code review URL.
          example: https://github.com/CircleCI-Public/api-preview-docs/pull/123
        revision:
          type: string
          description: The code revision the pipeline ran.
          example: f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
        tag:
          type: string
          description: The tag used by the pipeline. The commit that this tag points
            to was used for the pipeline. Note that `branch` and `tag` are mutually
            exclusive.
          example: v3.1.4159
        commit:
          $ref: "#/components/schemas/PipelineListResponse_vcs_commit"
        origin_repository_url:
          type: string
          description: "URL for the repository where the trigger originated. For fork-PR\
            \ pipelines, this is the URL to the fork. For other pipelines the `origin_`\
            \ and `target_repository_url`s will be the same."
          example: https://github.com/CircleCI-Public/api-preview-docs
      description: VCS information for the pipeline.
      example:
        review_id: "123"
        target_repository_url: https://github.com/CircleCI-Public/api-preview-docs
        review_url: https://github.com/CircleCI-Public/api-preview-docs/pull/123
        commit:
          subject: subject
          body: body
        tag: v3.1.4159
        provider_name: GitHub
        branch: feature/design-new-api
        origin_repository_url: https://github.com/CircleCI-Public/api-preview-docs
        revision: f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
    Pipeline_1:
      title: Pipeline
      required:
      - created_at
      - errors
      - id
      - number
      - project_slug
      - state
      - trigger
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the pipeline.
          format: uuid
          example: 5034460f-c7c4-4c43-9457-de07e2029e7b
        errors:
          type: array
          description: A sequence of errors that have occurred within the pipeline.
          items:
            $ref: "#/components/schemas/PipelineListResponse_errors"
        project_slug:
          type: string
          description: The project-slug for the pipeline.
          example: gh/CircleCI-Public/api-preview-docs
        updated_at:
          type: string
          description: The date and time the pipeline was last updated.
          format: date-time
        number:
          type: integer
          description: The number of the pipeline.
          format: int64
          example: 25
        trigger_parameters:
          type: object
          additionalProperties:
            anyOf:
            - type: string
            - type: integer
              format: int64
            - type: boolean
            - type: object
        state:
          type: string
          description: The current state of the pipeline.
          enum:
          - created
          - errored
          - setup-pending
          - setup
          - pending
        created_at:
          type: string
          description: The date and time the pipeline was created.
          format: date-time
        trigger:
          $ref: "#/components/schemas/PipelineListResponse_trigger"
        vcs:
          $ref: "#/components/schemas/PipelineListResponse_vcs"
      description: A pipeline response.
      example:
        project_slug: gh/CircleCI-Public/api-preview-docs
        number: 25
        updated_at: 2000-01-23T04:56:07.000+00:00
        vcs:
          review_id: "123"
          target_repository_url: https://github.com/CircleCI-Public/api-preview-docs
          review_url: https://github.com/CircleCI-Public/api-preview-docs/pull/123
          commit:
            subject: subject
            body: body
          tag: v3.1.4159
          provider_name: GitHub
          branch: feature/design-new-api
          origin_repository_url: https://github.com/CircleCI-Public/api-preview-docs
          revision: f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 5034460f-c7c4-4c43-9457-de07e2029e7b
        trigger_parameters:
          key: ""
        state: created
        trigger:
          actor:
            avatar_url: avatar_url
            login: login
          received_at: 2000-01-23T04:56:07.000+00:00
          type: scheduled_pipeline
        errors:
        - type: config
          message: message
        - type: config
          message: message
    Project_vcs_info:
      required:
      - default_branch
      - provider
      - vcs_url
      type: object
      properties:
        vcs_url:
          type: string
          description: URL to the repository hosting the project's code
          example: https://github.com/CircleCI-Public/api-preview-docs
        provider:
          type: string
          description: The VCS provider
          enum:
          - Bitbucket
          - CircleCI
          - GitHub
        default_branch:
          type: string
          example: main
      description: Information about the VCS that hosts the project source code.
      example:
        provider: Bitbucket
        vcs_url: https://github.com/CircleCI-Public/api-preview-docs
        default_branch: main
    Job Details_project:
      required:
      - external_url
      - id
      - name
      - slug
      type: object
      properties:
        id:
          type: string
          format: uuid
        slug:
          type: string
          description: "Project slug in the form `vcs-slug/org-name/repo-name`. The\
            \ `/` characters may be URL-escaped. For projects that use GitLab or GitHub\
            \ App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization\
            \ ID (found in Organization Settings), and replace `repo-name` with the\
            \ project ID (found in Project Settings)."
          example: gh/CircleCI-Public/api-preview-docs
        name:
          type: string
          description: The name of the project
          example: api-preview-docs
        external_url:
          type: string
          description: URL to the repository hosting the project's code
          example: https://github.com/CircleCI-Public/api-preview-docs
      description: Information about a project.
      example:
        external_url: https://github.com/CircleCI-Public/api-preview-docs
        name: api-preview-docs
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        slug: gh/CircleCI-Public/api-preview-docs
    Job Details_parallel_runs:
      required:
      - index
      - status
      type: object
      properties:
        index:
          type: integer
          description: Index of the parallel run.
          format: int64
        status:
          type: string
          description: Status of the parallel run.
      description: Info about a status of the parallel run.
      example:
        index: 0
        status: status
    Job Details_latest_workflow:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the workflow.
          format: uuid
        name:
          type: string
          description: The name of the workflow.
          example: build-and-test
      description: Info about the latest workflow the job was a part of.
      example:
        name: build-and-test
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    Job Details_executor:
      required:
      - resource_class
      type: object
      properties:
        resource_class:
          type: string
          description: Resource class name.
        type:
          type: string
          description: Executor type.
      description: Information about executor used for a job.
      example:
        resource_class: resource_class
        type: type
    Job Details_pipeline:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the pipeline.
          format: uuid
          example: 5034460f-c7c4-4c43-9457-de07e2029e7b
      description: Info about a pipeline the job is a part of.
      example:
        id: 5034460f-c7c4-4c43-9457-de07e2029e7b
    Job Details_messages:
      required:
      - message
      - type
      type: object
      properties:
        type:
          type: string
          description: Message type.
        message:
          type: string
          description: Information describing message.
        reason:
          type: string
          description: Value describing the reason for message to be added to the
            job.
      description: Message from CircleCI execution platform.
      example:
        reason: reason
        type: type
        message: message
    Job Details_contexts:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the context.
      description: Information about the context.
      example:
        name: name
    Job Details_organization:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the organization.
      description: Information about an organization.
      example:
        name: name
    User_1:
      title: User
      required:
      - id
      - login
      - name
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the user.
          format: uuid
        login:
          title: Login
          type: string
          description: The login information for the user on the VCS.
        name:
          type: string
          description: The name of the user.
      description: The attribution actor who will run the scheduled pipeline.
      example:
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        login: login
    Schedule_1:
      title: Schedule
      required:
      - actor
      - created-at
      - description
      - id
      - name
      - parameters
      - project-slug
      - timetable
      - updated-at
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the schedule.
          format: uuid
        timetable:
          description: Timetable that specifies when a schedule triggers.
          anyOf:
          - required:
            - days-of-week
            - hours-of-day
            - per-hour
            type: object
            properties:
              per-hour:
                type: integer
                description: "Number of times a schedule triggers per hour, value\
                  \ must be between 1 and 60"
                format: integer
              hours-of-day:
                type: array
                description: Hours in a day in which the schedule triggers.
                items:
                  type: integer
                  description: "Hour in a day in UTC, value must be between 0 and\
                    \ 24"
                  format: integer
              days-of-week:
                type: array
                description: Days in a week in which the schedule triggers.
                items:
                  type: string
                  description: "Day in a week, in three letters format"
                  enum:
                  - TUE
                  - SAT
                  - SUN
                  - MON
                  - THU
                  - WED
                  - FRI
              days-of-month:
                type: array
                description: Days in a month in which the schedule triggers. This
                  is mutually exclusive with days in a week.
                items:
                  type: integer
                  description: "Day in a month, between 1 and 31."
                  format: integer
              months:
                type: array
                description: Months in which the schedule triggers.
                items:
                  type: string
                  description: "Month, in three letters format."
                  enum:
                  - MAR
                  - NOV
                  - DEC
                  - JUN
                  - MAY
                  - OCT
                  - FEB
                  - APR
                  - SEP
                  - AUG
                  - JAN
                  - JUL
          - required:
            - days-of-month
            - hours-of-day
            - per-hour
            type: object
            properties:
              per-hour:
                type: integer
                description: "Number of times a schedule triggers per hour, value\
                  \ must be between 1 and 60"
                format: integer
              hours-of-day:
                type: array
                description: Hours in a day in which the schedule triggers.
                items:
                  type: integer
                  description: "Hour in a day in UTC, value must be between 0 and\
                    \ 24"
                  format: integer
              days-of-month:
                type: array
                description: Days in a month in which the schedule triggers. This
                  is mutually exclusive with days in a week.
                items:
                  type: integer
                  description: "Day in a month, between 1 and 31."
                  format: integer
              days-of-week:
                type: array
                description: Days in a week in which the schedule triggers.
                items:
                  type: string
                  description: "Day in a week, in three letters format"
                  enum:
                  - TUE
                  - SAT
                  - SUN
                  - MON
                  - THU
                  - WED
                  - FRI
              months:
                type: array
                description: Months in which the schedule triggers.
                items:
                  type: string
                  description: "Month, in three letters format."
                  enum:
                  - MAR
                  - NOV
                  - DEC
                  - JUN
                  - MAY
                  - OCT
                  - FEB
                  - APR
                  - SEP
                  - AUG
                  - JAN
                  - JUL
        updated-at:
          type: string
          description: The date and time the pipeline was last updated.
          format: date-time
        name:
          type: string
          description: Name of the schedule.
        created-at:
          type: string
          description: The date and time the pipeline was created.
          format: date-time
        project-slug:
          type: string
          description: The project-slug for the schedule
          example: gh/CircleCI-Public/api-preview-docs
        parameters:
          type: object
          additionalProperties:
            anyOf:
            - type: integer
            - type: string
            - type: boolean
          description: Pipeline parameters represented as key-value pairs. Must contain
            branch or tag.
          example:
            deploy_prod: true
            branch: feature/design-new-api
        actor:
          $ref: "#/components/schemas/User_1"
        description:
          type: string
          description: Description of the schedule.
          x-nullable: true
      description: A schedule response
      example:
        project-slug: gh/CircleCI-Public/api-preview-docs
        actor:
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          login: login
        updated-at: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        created-at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        parameters:
          deploy_prod: true
          branch: feature/design-new-api
        timetable: ""
    Artifact:
      title: Artifact
      required:
      - node_index
      - path
      - url
      type: object
      properties:
        path:
          type: string
          description: The artifact path.
        node_index:
          minimum: 0
          type: integer
          description: The index of the node that stored the artifact.
          format: int64
        url:
          type: string
          description: The URL to download the artifact contents.
      description: An artifact
      example:
        path: path
        node_index: 0
        url: url
    TestsResponse_items:
      required:
      - classname
      - file
      - message
      - name
      - result
      - run_time
      - source
      type: object
      properties:
        message:
          type: string
          description: The failure message associated with the test.
          example: ""
          x-nullable: true
        source:
          type: string
          description: The program that generated the test results
          example: ""
        run_time:
          type: number
          description: The time it took to run the test in seconds
          format: double
        file:
          type: string
          description: The file in which the test is defined.
          example: ""
        result:
          type: string
          description: Indication of whether the test succeeded.
          example: ""
        name:
          type: string
          description: The name of the test.
          example: ""
        classname:
          type: string
          description: The programmatic location of the test.
          example: ""
      example:
        result: ""
        file: ""
        run_time: 0.8008281904610115
        classname: ""
        name: ""
        source: ""
        message: ""
    inline_response_200_14_scope:
      required:
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: "ID of the scope being used (at the moment, only project ID\
            \ is supported)"
          format: uuid
        type:
          type: string
          description: Type of the scope being used
      description: The scope in which the relevant events that will trigger webhooks
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        type: type
    Webhook_1:
      title: Webhook
      required:
      - created-at
      - events
      - id
      - name
      - scope
      - signing-secret
      - updated-at
      - url
      - verify-tls
      type: object
      properties:
        url:
          type: string
          description: "URL to deliver the webhook to. Note: protocol must be included\
            \ as well (only https is supported)"
        verify-tls:
          type: boolean
          description: Whether to enforce TLS certificate verification when delivering
            the webhook
        id:
          type: string
          description: The unique ID of the webhook
          format: uuid
        signing-secret:
          type: string
          description: Masked value of the secret used to build an HMAC hash of the
            payload and passed as a header in the webhook request
        updated-at:
          type: string
          description: The date and time the webhook was last updated.
          format: date-time
          example: 2015-09-21T17:29:21.042Z
        name:
          type: string
          description: Name of the webhook
        created-at:
          type: string
          description: The date and time the webhook was created.
          format: date-time
          example: 2015-09-21T17:29:21.042Z
        scope:
          $ref: "#/components/schemas/inline_response_200_14_scope"
        events:
          type: array
          description: Events that will trigger the webhook
          items:
            type: string
            enum:
            - workflow-completed
            - job-completed
      example:
        updated-at: 2015-09-21T17:29:21.042Z
        scope:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          type: type
        name: name
        signing-secret: signing-secret
        created-at: 2015-09-21T17:29:21.042Z
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        verify-tls: true
        url: url
        events:
        - workflow-completed
        - workflow-completed
    Job:
      title: Job
      required:
      - dependencies
      - id
      - name
      - project_slug
      - started_at
      - status
      - type
      type: object
      properties:
        canceled_by:
          type: string
          description: The unique ID of the user.
          format: uuid
        dependencies:
          type: array
          description: A sequence of the unique job IDs for the jobs that this job
            depends upon in the workflow.
          items:
            type: string
            description: The unique ID of the job.
            format: uuid
        job_number:
          type: integer
          description: The number of the job.
          format: int64
          example: 1
        id:
          type: string
          description: The unique ID of the job.
          format: uuid
        started_at:
          type: string
          description: The date and time the job started.
          format: date-time
        name:
          type: string
          description: The name of the job.
        approved_by:
          type: string
          description: The unique ID of the user.
          format: uuid
        project_slug:
          type: string
          description: The project-slug for the job.
          example: gh/CircleCI-Public/api-preview-docs
        status:
          type: string
          description: The current status of the job.
          enum:
          - success
          - running
          - not_run
          - failed
          - retried
          - queued
          - not_running
          - infrastructure_fail
          - timedout
          - on_hold
          - terminated-unknown
          - blocked
          - canceled
          - unauthorized
        type:
          type: string
          description: The type of job.
          enum:
          - build
          - approval
        requires:
          type: object
          additionalProperties:
            type: array
            description: A sequence of statuses that the job must have one of to satisfy
              a dependency.
            items:
              type: string
              enum:
              - success
              - failed
              - canceled
          description: A sequence of the unique jobs and required statuses that this
            job depends upon in the workflow.
          example:
            d212e286-9962-4ed7-92e2-8699622ed720:
            - success
            "74be7583-44de-42a6-be75-8344de52a6f2":
            - failed
            - canceled
            a3349b77-90f7-4a39-b49b-7790f7da3943:
            - success
            - failed
            - canceled
        stopped_at:
          type: string
          description: The time when the job stopped.
          format: date-time
          x-nullable: true
        approval_request_id:
          type: string
          description: The unique ID of the job.
          format: uuid
      description: Job
      example:
        canceled_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        type: build
        dependencies:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        project_slug: gh/CircleCI-Public/api-preview-docs
        approved_by: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        approval_request_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        started_at: 2000-01-23T04:56:07.000+00:00
        job_number: 1
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        stopped_at: 2000-01-23T04:56:07.000+00:00
        status: success
        requires:
          d212e286-9962-4ed7-92e2-8699622ed720:
          - success
          "74be7583-44de-42a6-be75-8344de52a6f2":
          - failed
          - canceled
          a3349b77-90f7-4a39-b49b-7790f7da3943:
          - success
          - failed
          - canceled
  responses:
    BadRequest:
      description: |
        The request is malformed (e.g, a given path parameter is invalid)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_400"
    Forbidden:
      description: |
        The user is forbidden from making this request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_403"
    InternalServerError:
      description: Something unexpected happened on the server.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_500"
    Unauthorized:
      description: |
        The request is unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_401"
    UnexpectedServerError:
      description: Something unexpected happened on the server.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_500_1"
    "400_unexpected_request_body":
      description: Unexpected request body provided.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_400_4"
    "403_permission_denied":
      description: None or insufficient credentials provided.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_403_1"
    "500_internal_server_error":
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_500_3"
    "400_invalid_context_id":
      description: Context ID provided is invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_400_2"
    "401_invalid_token":
      description: Credentials provided are invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_401_2"
          examples:
            invalid_token:
              summary: Token is invalid.
              value:
                message: Invalid token provided.
            old_token:
              summary: Token was generated before 2023-06-23.
              value:
                message: New format tokens are needed to authenticate this API endpoint.
                  Create a new API token for access.
            query_auth:
              summary: Authentication attempted via query parameters.
              value:
                message: "Support for query parameter authentication has been deprecated\
                  \ to improve security. Please use a supported authentication method\
                  \ such as header-based, or basic authentication."
    "404_entity_not_found":
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_401_2"
          examples:
            context_not_found:
              summary: Context not found.
              value:
                message: Context not found.
            org_not_found:
              summary: Organization not found.
              value:
                message: Organization does not exist.
            user_not_found:
              summary: User not found.
              value:
                message: User does not exist.
            project_not_found:
              summary: Project not found.
              value:
                message: Project does not exist.
            group_not_found:
              summary: Group not found.
              value:
                message: Group does not exist.
            orb_not_found:
              summary: Orb not found.
              value:
                message: Orb does not exist.
    "429_rate_limit_exceeded":
      description: API rate limits exceeded.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_429"
    "400_invalid_restriction_id":
      description: Context restriction ID provided is invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_400_3"
    "405_cannot_create_standalone_project":
      description: Create projects using the API is currently supported for classic
        Github OAuth and Bitbucket projects only.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_405"
    "404_project_not_found":
      description: "Insufficient credentials for a private project, OR the organization,\
        \ project, or repository does not exist."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/inline_response_404_2"
  parameters:
    Claims:
      name: claims
      in: query
      description: comma separated list of claims to delete. Valid values are "audience"
        and "ttl".
      required: true
      style: form
      explode: true
      schema:
        type: string
    OrgID:
      name: orgID
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
    ProjectID:
      name: projectID
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
    Context:
      name: context
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    DecisionID:
      name: decisionID
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    OwnerID:
      name: ownerID
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    org_id:
      name: org_id
      in: path
      description: An opaque identifier of an organization.
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: b9291e0d-a11e-41fb-8517-c545388b5953
    context_id:
      name: context_id
      in: path
      description: An opaque identifier of a context.
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: be8bb2e3-c3d6-4098-89f4-572ff976ba9a
    restriction_id:
      name: restriction_id
      in: path
      description: An opaque identifier of a context restriction.
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: 1c23d2cb-07b1-4a28-8af3-e369732050ed
    providerNoGitlab:
      name: provider
      in: path
      description: "The `provider` segment of a project or org slug, the first of\
        \ the three. This may be a VCS. For projects that use GitHub App, use `circleci`."
      required: true
      style: simple
      explode: false
      schema:
        type: string
        enum:
        - github
        - gh
        - bitbucket
        - bb
        - circleci
      example: gh
    organization:
      name: organization
      in: path
      description: "The `organization` segment of a project or org slug, the second\
        \ of the three. For GitHub OAuth or Bitbucket projects, this is the organization\
        \ name. For projects that use GitLab or GitHub App, use the organization ID\
        \ (found in Organization Settings)."
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: CircleCI-Public
    project:
      name: project
      in: path
      description: "The `project` segment of a project slug, the third of the three.\
        \ For GitHub OAuth or Bitbucket projects, this is the repository name. For\
        \ projects that use GitLab or GitHub App, use the project ID (found in Project\
        \ Settings)."
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: api-preview-docs
    provider:
      name: provider
      in: path
      description: "The `provider` segment of a project or org slug, the first of\
        \ the three. This may be a VCS. For projects that use GitLab or GitHub App,\
        \ use `circleci`."
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: gh
    usage_export_job_id:
      name: usage_export_job_id
      in: path
      description: An opaque identifier of a usage export job.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
      example: e8235eed-f121-4ae3-9c72-2719d6572818
  securitySchemes:
    api_key_header:
      type: apiKey
      description: Project API tokens are not supported for API v2. Use a personal
        API token.
      name: Circle-Token
      in: header
    basic_auth:
      type: http
      description: "HTTP basic authentication. The username should be set as the circle-token\
        \ value, and the password should be left blank. Note that project tokens are\
        \ currently not supported on API v2."
      scheme: basic
    api_key_query:
      type: apiKey
      description: DEPRECATED - we will remove this option in the future. Project
        API tokens are not supported for API v2. Use a personal API token.
      name: circle-token
      in: query
